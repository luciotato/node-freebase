{"ts":1368027436674,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1368027397087,"patch":[[{"diffs":[[1,"//By Spencer Kelly (@spencermountain)\n//https://github.com/spencermountain/Freebase-nodejs\n\n//if nodejs, load these modules, otherwise assume they're included\nif (typeof module !== 'undefined' && module.exports) {\n  var _ = require('underscore');\n  var async = require('async');\n  var fns = require('./helpers/helpers');\n  var data = require('./helpers/data.js').data;\n}\n\n  var freebase = {};\n\n  var globals = {\n    host: 'https://www.googleapis.com/freebase/v1/',\n    image_host: \"https://usercontent.googleapis.com/freebase/v1/image\",\n    geosearch: 'http://api.freebase.com/api/service/geosearch',\n    wikipedia_host: 'http://en.wikipedia.org/w/api.php',\n    generic_query: {\n      id: null,\n      name: null,\n      mid: null,\n      type: []\n    }\n  }\n\n  freebase.mqlread = function(query, options, callback) {\n    this.doc = \"interface to freebase's mql api\";\n    this.reference = \"http://wiki.freebase.com/wiki/MQL\";\n    callback = callback || console.log;\n    if (!query) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    options.uniqueness_failure = options.uniqueness_failure || \"soft\";\n    options.cursor = options.cursor || true;\n    fns.post(query, options, function(result) {\n      return callback(result)\n    })\n  }\n  //freebase.mqlread([{id:\"/en/radiohead\",name:null}])\n\n  freebase.lookup_id = function(q, options, callback) {\n    this.doc = \"generic info for an id\";\n    var ps = fns.settle_params(arguments, freebase.lookup, {\n      type: \"/common/topic\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var query = fns.clone(globals.generic_query);\n    query.id = ps.q;\n    freebase.mqlread([query], options, function(r) {\n      r = r.result || []\n      return ps.callback(r[0] || {})\n    })\n  }\n   //freebase.lookup_id('/en/radiohead')\n  // freebase.lookup_id('/m/07jnt')\n\n  freebase.search = function(q, options, callback) {\n    this.doc = \"regular search api\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\";\n    var ps = fns.settle_params(arguments, freebase.search, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    if (ps.is_id) {\n      return freebase.lookup_id(ps.q, ps.options, ps.callback);\n    }\n    //if its a url\n    if (ps.url) {\n      return freebase.url_lookup(ps.q, ps.options, function(result) {\n        if (result && result.result && result.result[0]) {\n          return ps.callback(result.result[0]);\n        }\n        return ps.callback({})\n      })\n    }\n    //if its an id\n    if (ps.is_id) {\n      ps.options.limit = 1;\n      return freebase.lookup_id(ps.q, ps.options, ps.callback)\n    }\n    ps.options.query = encodeURIComponent(ps.q);\n    var params = fns.set_params(ps.options)\n    var url = globals.host + 'search/?' + params;\n    if (ps.options.type == \"/type/type\" || ps.options.type == \"/type/property\") {\n      url += \"&scoring=schema&stemmed=true\"\n    }\n    fns.http(url, ps.options, function(result) {\n      if (!result || !result.result || !result.result[0]) {\n        return ps.callback([])\n      }\n      return ps.callback(result.result)\n    })\n  }\n  //freebase.search(\"bill murray\")\n  // freebase.search(\"/m/01sh40\")\n  //freebase.search(\"/en/radiohead\")\n\n  //*************\n  //slightly different lookup when its a url\n  freebase.url_lookup = function(q, options, callback) {\n    this.doc = \"freebase search tuned for looking up a url\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\"\n    var ps = fns.settle_params(arguments, freebase.url_lookup, {\n      type: \"/common/topic\",\n      strict: true\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var output = fns.clone(globals.generic_query);\n    var url = globals.host + 'search?type=/common/topic&limit=1&query=' + encodeURIComponent(ps.q);\n    url += \"&mql_output=\" + encodeURIComponent(JSON.stringify(output));\n    fns.http(url, ps.options, function(result) {\n      if (!result || !result.result) {\n        return ps.callback({})\n      }\n      var r = result.result || []\n      return ps.callback(r[0])\n    })\n  }\n  // freebase.url_lookup(\"http://myspace.com/u2\")\n\n\n  freebase.lookup = function(q, options, callback) {\n    this.doc = \"freebase search with filters to ensure only a confident, unambiguous result\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\"\n    var ps = fns.settle_params(arguments, freebase.lookup, {\n      type: \"/common/topic\",\n      strict: true\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its a url\n    if (ps.url) {\n      return freebase.url_lookup(ps.q, ps.options, ps.callback)\n    }\n    //if its an id\n    if (ps.is_id) {\n      ps.options.limit = 1;\n      return freebase.lookup_id(ps.q, ps.options, ps.callback)\n    }\n    //craft the url\n    var strength = ps.options.strength || \"full\";\n    if (!ps.options.strict) {\n      strength = \"word\"\n    }\n    var url = globals.host + 'search?limit=2&lang=en&type=' + ps.options.type + '&filter=';\n    var output = fns.clone(globals.generic_query);\n    url += encodeURIComponent('(any name{' + strength + '}:\"' + ps.q + '\" alias{' + strength + '}:\"' + ps.q + '\")');\n    if (ps.options.type == \"/type/type\" || ps.options.type == \"/type/property\") {\n      url += \"&scoring=schema&stemmed=true\"\n    }\n    url += \"&mql_output=\" + encodeURIComponent(JSON.stringify(output));\n    return fns.http(url, ps.options, function(result) {\n      if (!result || !result.result || !result.result[0]) {\n        return ps.callback({})\n      }\n      //filter-out shit results\n      result = result.result || []\n      result[0] = result[0] || {}\n      result[1] = result[1] || {}\n      //kill low-relevance\n      if (!result[0].score && result[0].score < 30) {\n        return ps.callback({})\n      }\n      if (ps.options.strict) {\n        //kill if 2nd result is also notable\n        if (((result[0].score || 0) * 0.7) < (result[1].score || 0)) {\n          return ps.callback({})\n        }\n      }\n      //kill if types are crap\n      if (result[1] && result[0].notable && fns.isin(result[0].notable.id, data.kill)) {\n        return ps.callback({})\n      }\n      result[0].name = result[0].name || result[0].text || '';\n      return ps.callback(result[0])\n    })\n  }\n  // freebase.lookup([\"/en/radiohead\", \"http://myspace.com/u2\"])\n  // freebase.lookup(\"/m/01sh40\")\n  //freebase.search(\"/en/radiohead\")\n  //freebase.lookup(\"pulp fiction\")\n\n\n\n  freebase.get_id = function(q, options, callback) {\n    this.doc = \"like freebase.lookup but satisfied with an id\"\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\"\n    var ps = fns.settle_params(arguments, freebase.get_id, {\n      type: \"/common/topic\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //is an id\n    if (!ps.q || (ps.q.match(/\\/.{1,32}\\/.{3}/) != null)) {\n      return ps.callback({\n        id: ps.q\n      })\n    }\n    //is a normal search\n    freebase.lookup(ps.q, ps.options, function(result) {\n      if (!result) {\n        return ps.callback({})\n      }\n      if (ps.options.type == \"/type/type\") {\n        result.mid = result.id;\n        return ps.callback(result)\n      }\n      if (result.mid) {\n        result.id = result.id || result.mid;\n        return ps.callback(result)\n      }\n      return ps.callback({})\n    })\n  }\n  //freebase.get_id(\"/en/radiohead\")\n\n  freebase.topic = function(q, options, callback) {\n    this.doc = \"topic api\"\n    this.reference = \"http://wiki.freebase.com/wiki/Topic_API\"\n    var ps = fns.settle_params(arguments, freebase.topic, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      var id = topic.id;\n      if (!id) {\n        return ps.callback({})\n      }\n      ps.options.filter = ps.options.filter || 'all'\n      var url = globals.host + 'topic' + id + '?' + fns.set_params(ps.options)\n      fns.http(url, ps.options, function(result) {\n        return ps.callback(result)\n      })\n    })\n  }\n  // freebase.topic(\"toronto\", {filter:\"allproperties\"})\n\n\n\n  freebase.paginate = function(query, options, callback) {\n    this.doc = \"get all of the results to your query\";\n    this.reference = \"http://wiki.freebase.com/wiki/MQL\";\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {}\n    callback = callback || console.log\n    options.max = options.max || 2000;\n    var all = [];\n    //recursive mqlread until cursor is false, or maximum reached\n    var iterate = function(cursor) {\n      options.cursor = cursor\n      freebase.mqlread(query, options, function(result) {\n        if (!result || !result.result) {\n          return callback(all);\n        }\n        all = all.concat(result.result);\n        if (result.cursor && (!options.max || all.length < options.max)) {\n          iterate(result.cursor)\n        } else {\n          return callback(all)\n        }\n      })\n    }\n    iterate('')\n  }\n  // freebase.paginate([{\"type\":\"/astronomy/moon\",\"name\":null, limit:1}],{max:10})\n\n  freebase.description = function(q, options, callback) {\n    this.doc = \"get a text blurb from freebase\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiText\"\n    var ps = fns.settle_params(arguments, freebase.description, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var url = globals.host + 'text/' + topic.id;\n      fns.http(url, ps.options, function(result) {\n        if (!result.result) {\n          return ps.callback('')\n        }\n        return ps.callback(result.result)\n      })\n    });\n  }\n\n\n  freebase.image = function(q, options, callback) {\n    this.doc = \"get a url for image href of on this topic\"\n    this.reference = \"http://wiki.freebase.com/wiki/ApiImage\"\n    var ps = fns.settle_params(arguments, freebase.image, {\n      maxheight: 250,\n      maxwidth: 250,\n      errorid: \"/m/0djw4wd\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"/common/topic/image\": [{\n          \"id\": null\n        }]\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (!result || !result.result || !result.result[0] || !result.result[0][\"/common/topic/image\"][0]) {\n          return ps.callback('');\n        }\n        var url = globals.image_host + result.result[0][\"/common/topic/image\"][0].id;\n        var params = fns.set_params(ps.options);\n        url += '?' + params;\n        return ps.callback(url)\n      })\n    })\n  }\n  //freebase.image('radiohead',{type:\"/music/artist\"})\n\n  freebase.grammar = function(q, options, callback) {\n    this.doc = \"get the proper pronoun to use for a topic eg. he/she/they/it\"\n    var ps = fns.settle_params(arguments, freebase.grammar, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback({})\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"type\": [],\n        \"/people/person/gender\": [{\n          \"id\": null,\n          \"optional\": true\n        }],\n        \"/fictional_universe/fictional_character/gender\": [{\n          \"id\": null,\n          \"optional\": true\n        }]\n      }]\n      freebase.mqlread(query, options, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback({})\n        }\n        result = result.result[0];\n        var grammar = {\n          plural: false,\n          gender: null,\n          article: \"a\",\n          pronoun: \"it\",\n          copula: \"is\"\n        }\n        //people grammar\n        if (fns.isin('/people/person', result.type) || fns.isin('/fictional_universe/fictional_character', result.type)) {\n          var gender = result[\"/people/person/gender\"][0] || result[\"/fictional_universe/fictional_character/gender\"][0];\n          if (gender) {\n            if (gender.id == \"/en/male\") { //male\n              grammar.gender = \"male\";\n              grammar.pronoun = \"he\";\n            } else if (gender.id == \"/en/female\") { //female\n              grammar.gender = \"female\";\n              grammar.pronoun = \"she\";\n            }\n          } else { //no gender person\n            grammar.gender = \"unknown\";\n            grammar.pronoun = \"they\";\n          }\n        } else { //not a person\n          //plural topics\n          if (_.intersection(data.plural_types, result.type).length > 0) {\n            grammar.plural = true;\n            grammar.pronoun = \"they\";\n            grammar.copula = \"are\"\n          }\n          //categories that need a 'the' instead of 'a'\n          if (_.intersection(data.definate_articles, result.type).length > 0) {\n            grammar.article = \"the\";\n          }\n        }\n        return ps.callback(grammar);\n      })\n    })\n  }\n  //freebase.grammar(\"toronto maple leafs\")\n\n  freebase.same_as_links = function(q, options, callback) {\n    this.doc = \"turns a url into a freebase topic and list its same:as links\"\n    var ps = fns.settle_params(arguments, freebase.same_as_links, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    var url = globals.host + 'search?type=/common/topic&limit=1&query=' + encodeURIComponent(ps.q);\n    fns.http(url, ps.options, function(result) {\n      if (!result || !result.result || !result.result[0]) {\n        return ps.callback({})\n      }\n      //get its formatted links from the topic api\n      freebase.topic(result.result[0].mid, ps.options, function(all) {\n        if (_.isEmpty(all)) {\n          return ps.callback([]);\n        }\n        var links = [];\n        //same-as ones\n        if (all.property['/common/topic/topic_equivalent_webpage']) {\n          links = all.property['/common/topic/topic_equivalent_webpage'].values.map(function(v) {\n            return {\n              href: v.value,\n              title: fns.parseurl(v.value).authority\n            }\n          })\n        }\n        //webpage ones\n        if (all.property['/common/topic/topical_webpage']) {\n          links = links.concat(all.property['/common/topic/topical_webpage'].values.map(function(v) {\n            var host = fns.parseurl(v.value).authority || ''\n            return {\n              href: v.value,\n              title: host.replace(/^www\\./, '')\n            }\n          }))\n        }\n        var obj = {\n          topic: result.result[0],\n          links: links\n        }\n        return ps.callback(obj)\n      })\n    })\n  }\n\n\n  freebase.translate = function(q, options, callback) {\n    this.doc = \"return specific language title for a topic\"\n    this.reference = \"http://wiki.freebase.com/wiki/I18n\"\n    var ps = fns.settle_params(arguments, freebase.translate, {\n      lang: \"/lang/fr\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    if (!ps.options.lang.match(/\\/lang\\//)) {\n      ps.options.lang = '/lang/' + ps.options.lang\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": [{\n          \"lang\": ps.options.lang,\n          \"value\": null\n        }]\n      }]\n      freebase.mqlread(query, {}, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback('')\n        }\n        var name = result.result[0].name || [{}]\n        name = name[0].value || '';\n        return ps.callback(name)\n      })\n    })\n  }\n\n\n  freebase.notable = function(q, options, callback) {\n    this.doc = \"get a topic's notable type\"\n    var ps = fns.settle_params(arguments, freebase.notable, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    freebase.topic(ps.q, {\n      filter: \"/common/topic/notable_types\"\n    }, function(result) {\n      if (!result || !result.property || !result.property['/common/topic/notable_types']) {\n        return ps.callback({})\n      }\n      var notable = result.property['/common/topic/notable_types'] || {\n        values: []\n      };\n      notable.values[0].name = notable.values[0].text;\n      return ps.callback(notable.values[0])\n    });\n  }\n\n  freebase.sentence = function(q, options, callback) {\n    this.doc = \"get the first sentence of a topic description\"\n    this.reference = \"http://wiki.freebase.com/wiki/APIText\"\n    var ps = fns.settle_params(arguments, freebase.sentence, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback(ps);\n    }\n\n    freebase.description(ps.q, ps.options, function(desc) {\n      if (!desc) {\n        return ps.callback(\"\")\n      }\n      desc = fns.sentenceparser(desc) || []\n      desc = desc[0] || ''\n      desc = desc.replace(/\\(.*?\\)/g, '') //remove birthdates\n      desc = desc.replace(/  /g, ' ')\n      return ps.callback(desc)\n    })\n  }\n  //freebase.sentence(['radiohead','john malkovich'],{},console.log)\n\n  freebase.list = function(q, options, callback) {\n    this.doc = \"get a list of topics in a type\"\n    var ps = fns.settle_params(arguments, freebase.list, {\n      limit: 2000\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback([]);\n    }\n    //singularize it if its not an id\n    if (!ps.q.match(/\\/.{1,12}\\/.{3}/)) {\n      ps.q = fns.singularize(ps.q);\n    }\n    //get its id\n    freebase.get_id(ps.q, {\n      type: \"/type/type\"\n    }, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback([])\n      }\n      var query = [{\n        \"type\": topic.id,\n        \"name\": null,\n        \"id\": null,\n        \"mid\": null,\n        \"limit\": 100\n      }]\n      if (ps.options.extend) {\n        for (var i in ps.options.extend) {\n          query[0][i] = ps.options.extend[i]\n        }\n      }\n      freebase.paginate(query, ps.options, ps.callback)\n    })\n  }\n  //freebase.list(\"hurricanes\",{}, function(r){console.log(r)})\n\n\n  freebase.place_data = function(geo, options, callback) {\n    this.doc = \"from a geo-coordinate, get the town, province, country, and timezone for it\"\n    callback = callback || console.log;\n    if (!geo) {\n      return callback({})\n    }\n    options = options || {};\n    //handle an array\n    if (_.isArray(geo) && geo.length > 1) {\n      return fns.doit_async(geo, freebase.place_data, options, callback)\n    }\n    var location = {\n      \"coordinates\": [geo.lng, geo.lat],\n      \"type\": \"Point\"\n    }\n    var out = [{\n      \"mid\": null,\n      \"name\": null,\n      \"type\": []\n    }]\n    var url = globals.geosearch + '?location=' + encodeURIComponent(JSON.stringify(location)) + '&order_by=distance&limit=1&type=/location/citytown&within=15&format=json&mql_output=' + encodeURIComponent(JSON.stringify(out))\n    fns.http(url, options, function(r) {\n      var all = {\n        city: null,\n        country: null,\n        province: null,\n        timezone: null\n      }\n      all.city = r.result.features[0].properties;\n      var query = [{\n        \"name\": null,\n        \"id\": r.result.features[0].properties.mid,\n        \"/location/location/containedby\": [{\n          \"id\": null,\n          \"name\": null,\n          \"type\": [],\n          \"optional\": true,\n          \"/location/location/time_zones\": [{\n            \"/time/time_zone/offset_from_uct\": null,\n            \"id\": null,\n            \"name\": null,\n            \"optional\": true\n          }],\n          \"/location/location/containedby\": [{\n            \"id\": null,\n            \"name\": null,\n            \"type\": [],\n            \"optional\": true,\n            \"/location/location/time_zones\": [{\n              \"/time/time_zone/offset_from_uct\": null,\n              \"id\": null,\n              \"name\": null,\n              \"optional\": true\n            }]\n          }]\n        }]\n      }]\n      freebase.mqlread(query, {}, function(r) {\n        //hunt for the most appropriate topics in 2 layers\n        for (var i in r.result[0]['/location/location/containedby']) {\n          var v = r.result[0]['/location/location/containedby'][i]\n          if (v.type.filter(function(t) {\n            return t == \"/location/country\"\n          })[0]) {\n            all.country = {\n              id: v.id,\n              name: v.name\n            }\n          } else if (v.type.filter(function(t) {\n            return t == \"/location/administrative_division\"\n          })[0]) {\n            all.province = {\n              id: v.id,\n              name: v.name\n            }\n          }\n          if (v[\"/location/location/time_zones\"][0] && v[\"/location/location/time_zones\"].length == 1) {\n            all.timezone = v[\"/location/location/time_zones\"][0];\n          }\n          if (all.country) {\n            return callback(all)\n          }\n          //second layer looks good too\n          v['/location/location/containedby'].map(function(o) {\n            if (o.type.filter(function(t) {\n              return t == \"/location/country\"\n            })[0]) {\n              all.country = {\n                id: o.id,\n                name: o.name\n              }\n            } else if (!all.province && o.type.filter(function(t) {\n              return t == \"/location/administrative_division\"\n            })[0]) {\n              all.province = {\n                id: o.id,\n                name: o.name\n              }\n            }\n            if (!all.timezone && o[\"/location/location/time_zones\"][0] && o[\"/location/location/time_zones\"].length == 1) {\n              all.timezone = o[\"/location/location/time_zones\"][0];\n            }\n          })\n        }\n        return callback(all)\n      })\n\n    })\n  }\n  //  freebase.place_data({lat:51.545414293637286,lng:-0.07589578628540039}, {}, console.log)\n\n\n  freebase.incoming = function(q, options, callback) {\n    this.doc = \"get any incoming data to this topic, ignoring cvt types\"\n    var ps = fns.settle_params(arguments, freebase.incoming, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback([])\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"/type/reflect/any_reverse\": [{\n          \"link\": null,\n          \"id\": null,\n          \"name\": null,\n          \"type\": \"/common/topic\",\n          \"limit\": 170\n        }]\n      }]\n      //this technically doesn't paginate.\n      freebase.paginate(query, ps.options, function(result) {\n        if (!result || !result[0] || !result[0]['/type/reflect/any_reverse']) {\n          return ps.callback([])\n        }\n        return ps.callback(result[0]['/type/reflect/any_reverse'])\n      })\n    })\n  }\n\n  freebase.outgoing = function(q, options, callback) {\n    this.doc = \"return all outgoing links for a topic, traversing cvt types\"\n    var ps = fns.settle_params(arguments, freebase.outgoing, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    freebase.lookup(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.mid) {\n        return ps.callback([])\n      }\n      freebase.topic(topic.mid, ps.options, function(result) {\n        if (_.isEmpty(result)) {\n          return ps.callback([]);\n        }\n        var out = [];\n        //get rid of permissions and stuff..\n        result.property = fns.kill_boring(result.property)\n        Object.keys(result.property).forEach(function(key) {\n          var v = result.property[key];\n          //add topics\n          if (v.valuetype == \"object\") {\n            v.values = v.values.map(function(s) {\n              s.property = key;\n              return s\n            })\n            out = out.concat(v.values)\n          }\n          //add the topics from cvt values in the same manner\n          if (v.valuetype == \"compound\") {\n            v.values.forEach(function(c) {\n              c.property = fns.kill_boring(c.property);\n              Object.keys(c.property).forEach(function(key2) {\n                if (c.property[key2].valuetype == \"object\") {\n                  c.property[key2].values = c.property[key2].values.map(function(s) {\n                    s.property = [key, key2];\n                    return s\n                  })\n                  out = out.concat(c.property[key2].values)\n                }\n              })\n            })\n          }\n        })\n        out = out.map(function(o) {\n          return {\n            name: o.text,\n            id: o.id,\n            property: o.property\n          }\n        })\n        //add sentence-forms\n        out = out.map(function(o) {\n          var property = o.property || '';\n          if (_.isArray(o.property)) {\n            property = o.property.join('');\n          }\n          o.sentence = topic.name + \"'s \" + _.last(property.split('/')).replace('_', ' ') + \" is \" + o.name; //ugly fallback\n          var grammar = data.sentence_grammars.filter(function(v) {\n            return v.id == property\n          })[0] || {}\n          if (grammar[\"sen\"] && topic.name && o.name) {\n            o.sentence = grammar[\"sen\"].replace(/\\bsubj\\b/, topic.name).replace(/\\bobj\\b/, o.name);\n          }\n          return o\n        })\n        return ps.callback(out)\n      })\n    })\n  }\n  //freebase.outgoing(\"vancouver\")\n\n  freebase.graph = function(q, options, callback) {\n    this.doc = \"return all outgoing and incoming links for a topic\"\n    var ps = fns.settle_params(arguments, freebase.graph, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.lookup(ps.q, ps.options, function(topic) {\n      if (!topic) {\n        return ps.callback({})\n      }\n      delete topic.score;\n      delete topic.lang;\n      ps.options.filter = \"allproperties\";\n      freebase.topic(topic.mid, ps.options, function(r) {\n        if (!r || !r.property) {\n          return ps.callback([])\n        }\n        var incoming = {};\n        var outgoing = {};\n        Object.keys(r.property).forEach(function(k) {\n          if (k.match(/^\\!/)) {\n            outgoing[k] = r.property[k]\n          } else {\n            incoming[k] = r.property[k]\n          }\n        })\n        incoming = fns.parse_topic_api(incoming);\n        outgoing = fns.parse_topic_api(outgoing);\n        var out = incoming.map(function(v) {\n          return {\n            subject: topic,\n            property: {\n              id: v.property\n            },\n            object: v,\n            direction: \"outgoing\"\n          }\n        })\n        out = out.concat(outgoing.map(function(v) {\n          return {\n            object: topic,\n            property: {\n              id: v.property\n            },\n            subject: v,\n            direction: \"incoming\"\n          }\n        }))\n        //add the sentences\n        out = out.map(function(obj) {\n          obj.property.id = obj.property.id.replace(/^\\!/, '');\n          delete obj.subject.property;\n          var grammar = data.sentence_grammars.filter(function(v) {\n            return v.id == obj.property.id\n          })[0] || {}\n          obj.sentence = obj.subject.name + \"'s \" + _.last(obj.property.id.split('/')).replace('_', ' ') + \" is \" + obj.object.name;\n          if (grammar[\"sen\"] && obj.subject.name && obj.object.name) {\n            obj.sentence = grammar[\"sen\"].replace(/\\bsubj\\b/, obj.subject.name).replace(/\\bobj\\b/, obj.object.name);\n          }\n          return obj\n        })\n        return ps.callback(out)\n      })\n    })\n  }\n  //freebase.graph(\"toronto\")\n  // freebase.graph(\"/m/07jnt\")\n  //freebase.graph(\"shawshank redemption\")\n\n  freebase.related = function(q, options, callback) {\n    this.doc = \"get similar topics to a topic\"\n    var ps = fns.settle_params(arguments, freebase.related, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var all = [];\n    //pluck relevant connected topics from outgoing links\n    freebase.outgoing(ps.q, ps.options, function(result) {\n      all = result.filter(function(v) {\n        return fns.isin(v.property, data.related_properties)\n      })\n      //randomize the results\n      all = all.sort(function(a, b) {\n        return (Math.round(Math.random()) - 0.5);\n      })\n      all = all.map(function(v) {\n        if (!v.sentence) {\n          v.sentence = v.name + \" is related to \" + result.name\n        }\n        return v\n      })\n      all = fns.json_unique(all, \"id\")\n      if (all.length >= options.max) {\n        return ps.callback(all)\n      }\n      //else, append topics that share the notable type\n      freebase.notable(ps.q, ps.options, function(result) {\n        if (result && result.id) {\n          return freebase.list(result.id, {\n            max: ps.options.max\n          }, function(r) {\n            if (!r || _.isEmpty(r)) {\n              return ps.callback(all)\n            }\n            r = r.map(function(v) {\n              v.sentence = v.name + \" is also a \" + result.name;\n              return v\n            })\n            all = all.concat(r); //todo\n            all = fns.json_unique(all, \"id\")\n            all = all.sort(function(a, b) {\n              return (Math.round(Math.random()) - 0.5);\n            })\n            return ps.callback(all)\n          })\n        } else {\n          return ps.callback(all)\n        }\n      })\n    })\n  }\n  /*freebase.related(\"toronto\", {}, function(r){\n  console.log(JSON.stringify(r, null, 2));\n})*/\n\n  freebase.is_a = function(q, options, callback) {\n    this.doc = \"get a list of identifiers for a topic\"\n    var ps = fns.settle_params(arguments, freebase.related, {\n      max: 25\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.topic(ps.q, ps.options, function(r) {\n      if (_.isEmpty(r)) {\n        return ps.callback({});\n      }\n      var types = r.property[\"/type/object/type\"] || {}\n      types = types.values || []\n      types = types.filter(function(v) {\n        return !v.text.match(/Topic/)\n      })\n      types = types.map(function(v) {\n        return {\n          name: v.text,\n          id: v.id,\n          property: \"/type/object/type\"\n        }\n      })\n      r = fns.parse_topic_api(r.property)\n      r = r.filter(function(v) {\n        return fns.isin(v.property, data.is_a)\n      })\n      r = r.concat(types)\n      return ps.callback(r)\n    })\n  }\n  //freebase.is_a(\"toronto\")\n\n  freebase.property_lookup = function(q, options, callback) {\n    this.doc = \"lookup soft property matches, like 'birthday' vs 'date of birth'\"\n    var ps = fns.settle_params(arguments, freebase.property_lookup, {\n      type: \"/type/property\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.search(ps.q, ps.options, function(candidate_properties) {\n      //look up offline for property aliases\n      if (!q.match(/\\/.*?\\/.*?\\//)) {\n        q = q.toLowerCase();\n        q = q.replace(/  /, ' ');\n        q = q.replace(/^\\s+|\\s+$/, '');\n        var property_singular = fns.singularize(q);\n        candidate_properties = candidate_properties.concat(data.properties.filter(function(v) {\n          return v.n == q || v.n == property_singular\n        }))\n      }\n      return ps.callback(candidate_properties)\n    })\n  }\n  //freebase.property_lookup(\"albums\")\n\n\n  freebase.question = function(q, options, callback) {\n    this.doc = \"give a topic and a property, and get a list of results\"\n    var ps = fns.settle_params(arguments, freebase.question, {\n      max: 25\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid || !ps.options.property) {\n      return ps.callback({});\n    }\n    var property = ps.options.property\n    var type = ps.options.property.match(/\\/.*?\\/.*?\\//)\n\n    //straight-up id search\n    if (property.match(/^\\/.{1,12}\\/.{3}/)) {\n      return freebase.topic(q, {}, function(r) {\n        if (!r || !r.property || !r.property[property]) {\n          return ps.callback([])\n        }\n        return ps.callback(r.property[property].values)\n      })\n    }\n    var candidate_metaschema = fns.metaschema_lookup(property);\n    if (candidate_metaschema) {\n      ps.options.filter = '(all ' + candidate_metaschema + ':\"' + q + '\")'\n      freebase.search('', options, function(result) {\n        return ps.callback(result)\n      })\n    } else {\n      freebase.property_lookup(property, {}, function(candidate_properties) {\n        if (candidate_properties.length === 0) {\n          return ps.callback([])\n        }\n        ps.options.filter = type;\n        //look for these properties in the topic api\n        freebase.topic(ps.q, ps.options, function(result) {\n          if (_.isEmpty(result)) {\n            return ps.callback({});\n          }\n          var all = [];\n          candidate_properties.forEach(function(p) {\n            if (result.property[p.id]) {\n              all = all.concat(result.property[p.id].values)\n            }\n          })\n          all = fns.json_unique(all, \"id\")\n          return ps.callback(all)\n        })\n      })\n    }\n  }\n  //freebase.question(\"keanu reeves\", {property:\"children\"})\n  //freebase.question(\"thom yorke\", \"produced\") //******\n  //freebase.question(\"pulp fiction\", {property:\"/film/film/initial_release_date\"})\n  //freebase.question(\"keanu reeves\",\"films\") //******\n\n\n  freebase.dig = function(q, options, callback) {\n    this.doc = \"transitive query on a specific property, maximum 3-ply\"\n    var ps = fns.settle_params(arguments, freebase.property_lookup, {\n      max: 25\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var all = [];\n    freebase.question(ps.q, ps.options, function(r) {\n      if (!r || !_.isArray(r) || r.length === 0) {\n        return ps.callback(all)\n      }\n      all = all.concat(r);\n      r = r.slice(0, ps.options.max).map(function(v) {\n        return v.id\n      })\n      return fns.doit_async({\n        q: r,\n        options: ps.options,\n        method: freebase.question,\n        callback: function(big) {\n          if (!big || !_.isArray(big) || big.length === 0) {\n            return ps.callback(all)\n          }\n          all = all.concat(_.flatten(big, 'shallow'))\n          all = fns.json_unique(all, \"id\")\n          fns.doit_async(r, freebase.question, ps.options, function(big) {\n            if (!big || !_.isArray(big) || big.length === 0) {\n              return ps.callback(all)\n            }\n            all = all.concat(_.flatten(big, 'shallow'))\n            all = fns.json_unique(all, \"id\")\n            return ps.callback(all)\n          })\n        }\n      })\n    })\n  }\n  // freebase.dig('/en/bovid', {property:'/biology/organism_classification/lower_classifications'}, function(r){\n  //   console.log(r)\n  // })\n  // freebase.dig('/en/toronto', {property:'/location/location/contains'}, function(r){\n  //   console.log(r)\n  // })\n\n  freebase.gallery = function(q, options, callback) {\n    this.doc = \"list of topics with images\"\n    var ps = fns.settle_params(arguments, freebase.gallery, {\n      extend: {\n        \"/common/topic/image\": [{\n          \"id\": null,\n          \"optional\": \"required\"\n        }]\n      }\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.list(ps.q, ps.options, function(result) {\n      result = result.map(function(obj) {\n        obj.href = globals.image_host + _.last(obj[\"/common/topic/image\"]).id;\n        obj.thumbnail = globals.image_host + _.last(obj[\"/common/topic/image\"]).id + '?mode=fillcropmid&maxwidth=150&maxheight=150&errorid=/m/0djw4wd';\n        obj = freebase.add_widget(obj)\n        return obj;\n      })\n      return ps.callback(result)\n    })\n  }\n  // freebase.gallery('hurricanes') //******\n\n\n  freebase.wordnet = function(q, options, callback) {\n    this.doc = \"query wordnet via freebase\"\n    var ps = fns.settle_params(arguments, freebase.wordnet, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var query = [{\n      \"id\": null,\n      \"type\": \"/base/wordnet/synset\",\n      \"gloss\": null,\n      \"syntactic_category\": null,\n      \"sort\": [\n        \"syntactic_category\",\n        \"word.sense_number\",\n        \"a:word.word_number\"],\n      \"word\": {\n        \"sense_number\": null,\n        \"derivationally_related_forms\": [{\n          \"sense\": {\n            \"name\": null,\n            \"id\": null\n          },\n          \"optional\": true\n        }],\n        \"word\": {\n          \"word\": ps.q\n        }\n      },\n      \"a:word\": [{\n        \"word_number\": null,\n        \"word\": {\n          \"word\": null\n        }\n      }]\n    }]\n    if (ps.options.limit) {\n      query[0].limit = ps.options.limit;\n    }\n    freebase.mqlread(query, ps.options, function(r) {\n      return ps.callback(r.result)\n    })\n  }\n\n\n  freebase.transitive = function transitive(q, options, callback) {\n    this.doc = \"do a transitive-query, like all rivers in canada, using freebase metaschema\"\n    var ps = fns.settle_params(arguments, freebase.transitive, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback({})\n      }\n      var candidate_metaschema = fns.metaschema_lookup(ps.options.property);\n      if (candidate_metaschema) {\n        options.filter = '(all ' + candidate_metaschema + ':\"' + topic.id + '\")'\n        freebase.search('', ps.options, function(result) {\n          return ps.callback(result)\n        })\n      } else {\n        return ps.callback([])\n      }\n    })\n  }\n  //*******\n\n  freebase.geolocation = function(q, options, callback) {\n    this.doc = \"lat/long for a topic\"\n    var ps = fns.settle_params(arguments, freebase.geolocation, {\n      type: \"/location/location\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback({})\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"/location/location/geolocation\": [{\n          \"latitude\": null,\n          \"longitude\": null,\n          \"type\": \"/location/geocode\",\n          \"optional\": true\n        }]\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (result.result && result.result[0] && result.result[0]['/location/location/geolocation'][0]) {\n          var geo = result.result[0]['/location/location/geolocation'][0];\n          delete geo.type;\n          delete geo.optional;\n          return ps.callback(geo);\n        }\n        return ps.callback({})\n      })\n    })\n  }\n  //freebase.geolocation(\"cn tower\")\n\n  freebase.nearby = function(q, options, callback) {\n    this.doc = \"list of topics nearby a location\"\n    var ps = fns.settle_params(arguments, freebase.nearby, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.geolocation(ps.q, {}, function(geo) {\n      if (!geo || !geo.latitude || !geo.longitude) {\n        return ps.callback([])\n      }\n      //use the *old* freebase api for this, as there's no alternative in the new one\n      var location = '{\"coordinates\":[' + geo.longitude + ',' + geo.latitude + '],\"type\":\"Point\"}'\n      ps.options.within = ps.options.within || 5;\n      ps.options.type = ps.options.type || \"/location/location\";\n      var url = globals.geosearch + '?location=' + encodeURIComponent(location) + '&order_by=distance&type=' + ps.options.type + '&within=' + ps.options.within + '&limit=200&format=json'\n      fns.http(url, ps.options, function(r) {\n        return ps.callback(r.result.features)\n      })\n    })\n  }\n  //freebase.nearby(\"cn tower\", {type:\"/food/restaurant\"}, console.log)\n\n\n  freebase.inside = function(q, options, callback) {\n    this.doc = \"list of topics inside a location\"\n    var ps = fns.settle_params(arguments, freebase.inside, {\n      property: \"part_of\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //handy to have their geocoordinates too\n    ps.options.mql_output = ps.options.mql_output || [{\n      \"name\": null,\n      \"id\": null,\n      \"type\": \"/location/location\",\n      \"/location/location/geolocation\": [{\n        \"latitude\": null,\n        \"longitude\": null,\n        \"type\": \"/location/geocode\",\n        \"optional\": true\n      }]\n    }]\n    freebase.transitive(ps.q, ps.options, function(r) {\n      return ps.callback(r)\n    })\n  }\n  //freebase.inside(\"montreal\")//***********\n\n\n  freebase.wikipedia_page = function(q, options, callback) {\n    this.doc = \"get a url for wikipedia based on this topic\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"key\": {\n          \"namespace\": \"/wikipedia/en_title\",\n          \"value\": null\n        }\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback('')\n        }\n        return ps.callback('http://en.wikipedia.org/wiki/' + fns.mql_unencode(result.result[0].key.value))\n      })\n    })\n  }\n  //freebase.wikipedia_page('toronto')\n\n  freebase.dbpedia_page = function(q, options, callback) {\n    this.doc = \"get a url for dbpedia based on this topic\"\n    var ps = fns.settle_params(arguments, freebase.dbpedia, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"key\": {\n          \"namespace\": \"/wikipedia/en_title\",\n          \"value\": null\n        }\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback({})\n        }\n        var key = fns.mql_unencode(result.result[0].key.value)\n        var obj = {\n          html: 'http://dbpedia.org/page/' + key,\n          json: 'http://dbpedia.org/data/' + key + '.json',\n        }\n        return ps.callback(obj)\n      })\n    })\n  }\n  //freebase.dbpedia_page('toronto')\n\n  freebase.wikipedia_categories = function(q, options, callback) {\n    this.doc = \"get the wikipedia categories for a topic\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia_categories, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its not a wikipedia title, reuse get-topic logic for searches/ids\n    if (ps.q.match(/ /) || ps.q.substr(0, 1) == ps.q.substr(0, 1).toLowerCase() || ps.q.match(/^\\//)) {\n      return freebase.wikipedia_page(ps.q, options, function(r) {\n        freebase.wikipedia_categories(r, options, ps.callback)\n      })\n    }\n    var url = globals.wikipedia_host + '?action=query&prop=categories&format=json&clshow=!hidden&cllimit=200&titles=' + encodeURIComponent(ps.q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]) {\n        return ps.callback([])\n      }\n      var cats = r.query.pages[Object.keys(r.query.pages)[0]].categories || []\n      cats = cats.map(function(v) {\n        return v.title\n      })\n      return ps.callback(cats)\n    })\n  }\n  //freebase.wikipedia_categories([\"Thom Yorke\",\"Toronto\"], {}, console.log)\n  //freebase.wikipedia_categories(\"Thom Yorke\", {}, console.log)//****\n\n  freebase.wikipedia_links = function(q, options, callback) {\n    this.doc = \"outgoing links from this wikipedia page, converted to freebase ids\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.wikipedia_links, options, callback)\n    }\n    //if its not a wikipedia title, reuse get-topic logic for searches/ids\n    if (q.match(/ /) || q.substr(0, 1) == q.substr(0, 1).toLowerCase() || q.match(/^\\//)) {\n      return freebase.wikipedia_page(q, options, function(r) {\n        freebase.wikipedia_links(r, options, callback)\n      })\n    }\n    var url = globals.wikipedia_host + '?action=query&prop=links&format=json&plnamespace=0&pllimit=500&titles=' + encodeURIComponent(q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]) {\n        return callback([])\n      }\n      var links = r.query.pages[Object.keys(r.query.pages)[0]].links || []\n      //filter-out non-freebase topics\n      links = links.filter(function(v) {\n        return v.title.match(/^List of /i) == null\n      })\n      links = links.map(function(o) {\n        o.id = \"/wikipedia/en/\" + freebase.mql_encode(o.title.replace(/ /g, '_'));\n        o.name = o.title;\n        delete o.title;\n        delete o.ns;\n        return o\n      })\n      return callback(links)\n    })\n  }\n  //freebase.wikipedia_links(\"Toronto\", {}, console.log)\n\n  freebase.wikipedia_external_links = function(q, options, callback) {\n    this.doc = \"outgoing links from this wikipedia page, converted to freebase ids\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.wikipedia_external_links, options, callback)\n    }\n    //if its not a wikipedia title, reuse get-topic logic for searches/ids\n    if (q.match(/ /) || q.substr(0, 1) == q.substr(0, 1).toLowerCase() || q.match(/^\\//)) {\n      return freebase.wikipedia_page(q, options, function(r) {\n        freebase.wikipedia_external_links(r, options, callback)\n      })\n    }\n    var url = globals.wikipedia_host + '?action=query&prop=extlinks&format=json&plnamespace=0&pllimit=500&titles=' + encodeURIComponent(q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]) {\n        return callback([])\n      }\n      var links = r.query.pages[Object.keys(r.query.pages)[0]].extlinks || []\n      links = links.filter(function(v) {\n        return v[\"*\"].match(/^http/)\n      })\n      links = links.map(function(v) {\n        var box = fns.parseurl(v[\"*\"]);\n        return {\n          url: v[\"*\"],\n          domain: box.host\n        }\n      })\n      return callback(links)\n    })\n  }\n  //freebase.wikipedia_external_links(\"/en/toronto\", {}, console.log)\n\n\n  freebase.schema = function(q, options, callback) {\n    this.doc = \"common lookups for types and properties\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.schema, options, callback)\n    }\n    //see if its a type\n    freebase.search(q, {\n      type: \"/type/type\"\n    }, function(r) {\n      if (r && r[0] && r[0].id) {\n        r = r[0]\n        var query = [{\n          \"id\": r.id,\n          \"mid\": null,\n          \"name\": null,\n          \"properties\": [{\n            \"id\": null,\n            \"name\": null,\n            \"/type/property/reverse_property\": [{\n              \"id\": null,\n              \"name\": null,\n              \"optional\": true\n            }]\n          }],\n          \"/freebase/type_hints/mediator\": null,\n          \"/freebase/type_hints/included_types\": [{\n            \"id\": null,\n            \"name\": null\n          }],\n          \"/freebase/type_profile/published\": null,\n          \"/type/type/expected_by\": [{\n            \"id\": null,\n            \"name\": null\n          }],\n          \"/freebase/type_profile/instance_count\": null,\n          \"/freebase/type_profile/property_count\": null,\n          \"domain\": {\n            \"id\": null,\n            \"name\": null\n          },\n          \"/freebase/type_profile/equivalent_topic\": {\n            \"id\": null,\n            \"name\": null\n          },\n          \"type\": \"/type/type\"\n        }]\n        freebase.mqlread(query, {}, function(r) {\n          if (!r || !r.result || !r.result[0]) {\n            return callback({})\n          }\n          r = r.result[0]\n          var obj = {}\n          obj.domain = r.domain\n          obj.id = r.id\n          obj.included_types = r[\"/freebase/type_hints/included_types\"]\n          obj.incoming_properties = r[\"/type/type/expected_by\"]\n          obj.is_compound_value = r[\"/freebase/type_hints/mediator\"] || false\n          obj.is_commons = r[\"/freebase/type_profile/published\"] || false\n          obj.equivalent_topic = r[\"/freebase/type_profile/equivalent_topic\"]\n          obj.topic_count = r[\"/freebase/type_profile/instance_count\"] || 0\n          obj.property_count = r[\"/freebase/type_profile/property_count\"] || 0;\n          //types that include this one\n          var query = [{\n            \"id\": null,\n            \"name\": null,\n            \"s:name\": {\n              \"value\": null,\n              \"lang\": \"/lang/en\",\n              \"optional\": \"required\"\n            },\n            \"/freebase/type_hints/included_types\": [{\n              \"id\": obj.id\n            }]\n          }]\n          freebase.mqlread(query, {}, function(r) {\n            if (!r || !r.result) {\n              return callback(obj)\n            }\n            obj.included_by = r.result.map(function(v) {\n              return {\n                id: v.id,\n                name: v.name\n              }\n            })\n            return callback(obj)\n          })\n        })\n\n      } else {\n        freebase.property_lookup(q, {}, function(r) {\n          if (!r || !r[0] || !r[0].id) {\n            return callback({})\n          }\n          return freebase.property_inspection(r[0].id, {}, callback)\n        })\n      }\n    })\n  }\n  //freebase.schema(\"politician\")\n  //freebase.schema(\"/type/property/master_property\")\n\n\n  freebase.property_introspection = function(q, options, callback) {\n    this.doc = \"common lookups for freebase property data\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.property_introspection, options, callback)\n    }\n    var query = [{\n      \"id\": q,\n      \"mid\": null,\n      \"name\": null,\n      \"type\": \"/type/property\",\n      \"reverse_property\": [{\n        \"id\": null,\n        \"name\": null,\n        \"optional\": true\n      }],\n      \"expected_type\": [{\n        \"id\": null,\n        \"name\": null,\n        \"optional\": true,\n        \"/freebase/type_hints/mediator\": null\n      }],\n      \"unique\": null,\n      \"schema\": {\n        \"id\": null,\n        \"name\": null,\n        \"/freebase/type_profile/instance_count\": null,\n        \"/freebase/type_hints/mediator\": null\n      },\n      \"/common/topic/description\": null\n    }]\n    freebase.mqlread(query, options, function(r) {\n      var obj = {}\n      if (!r || !r.result || !r.result[0]) {\n        return callback(obj)\n      }\n      r = r.result[0]\n      obj.name = r.name\n      obj.id = r.id\n      obj.type = r.schema\n      obj.description = r[\"/common/topic/description\"]\n      obj.unique = r.unique || false;\n      obj.reverse_property = r.reverse_property\n      obj.expected_type = r.expected_type\n\n      //get its metaschema\n      var query = [{\n        \"name\": null,\n        \"type\": \"/base/fbontology/semantic_predicate\",\n        \"paths\": {\n          \"a:properties\": q,\n          \"b:properties\": [{\n            \"id\": null\n          }]\n        }\n      }]\n      freebase.mqlread(query, options, function(r) {\n        obj.meta = r.result\n        return callback(obj)\n      })\n    })\n    //   //get its property aliases\n    // var query=[{type:\"/base/natlang/property_alias\",\n    //   property:property,\n    //   alias:[]\n    //   }]\n  }\n  //freebase.property_introspection(\"/government/politician/party\")\n\n\n  //\n  freebase.drilldown = function(q, options, callback) {\n    this.doc = \"get insight into the breakdown of the topics in this type, by type and quality\"\n    var ps = fns.settle_params(arguments, freebase.drilldown, {\n      limit: 1000\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback([]);\n    }\n    //singularize it if its not an id\n    if (!ps.q.match(/\\/.{1,12}\\/.{3}/)) {\n      ps.q = fns.singularize(ps.q);\n    }\n    //get its id\n    freebase.get_id(ps.q, {\n      type: \"/type/type\"\n    }, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback([])\n      }\n      var query = [{\n        \"s:type\": topic.id,\n        \"type\": [],\n        \"name\": null,\n        \"id\": null,\n        \"limit\": 150,\n        \"estimate-count\": null,\n        \"/common/topic/image\": [{\n          \"id\": null,\n          \"limit\": 1,\n          \"optional\": true\n        }],\n        \"key\": [{\n          \"namespace\": \"/wikipedia/en\",\n          \"limit\": 1,\n          \"value\": null,\n          \"optional\": true\n        }],\n        \"/common/topic/alias\": [{\n          \"value\": null,\n          \"limit\": 1,\n          \"optional\": true\n        }]\n      }]\n      if (options.extend) {\n        for (var i in options.extend) {\n          query[0][i] = options.extend[i]\n        }\n      }\n      freebase.paginate(query, ps.options, function(result) {\n        var types = _.flatten(result.map(function(v) {\n          return v.type\n        }));\n        types = types.filter(function(v) {\n          return !v.match(/\\/topic$/)\n        })\n        var topk = fns.topk(types, result.length);\n        var aliases = result.filter(function(r) {\n          return r[\"/common/topic/alias\"].length > 0\n        })\n        var images = result.filter(function(r) {\n          return r[\"/common/topic/image\"].length > 0\n        })\n        var wikipedia = result.filter(function(r) {\n          return r[\"key\"].length > 0\n        })\n        var obj = {\n          types: topk,\n          alias_percent: fns.percentage(aliases.length, result.length),\n          image_percent: fns.percentage(images.length, result.length),\n          wikipedia_percent: fns.percentage(wikipedia.length, result.length),\n          subset: result.length,\n          \"estimate-count\": result[0][\"estimate-count\"]\n        }\n        ps.callback(obj)\n      })\n    })\n  }\n  // freebase.drilldown(\"/chemistry/chemical_compound\",{max:10000},console.log)\n\n\n  freebase.mql_encode = function(s) {\n    this.doc = \"quote a unicode string to turn it into a valid mql /type/key/value\"\n    if (!s) {\n      return ''\n    }\n    s = s.replace(/  /, ' ');\n    s = s.replace(/^\\s+|\\s+$/, '');\n    s = s.replace(/ /g, '_');\n    var mqlkey_start = 'A-Za-z0-9';\n    var mqlkey_char = 'A-Za-z0-9_-';\n    var MQLKEY_VALID = new RegExp('^[' + mqlkey_start + '][' + mqlkey_char + ']*$');\n    var MQLKEY_CHAR_MUSTQUOTE = new RegExp('([^' + mqlkey_char + '])', 'g');\n    if (MQLKEY_VALID.exec(s)) // fastpath\n    return s;\n    var convert = function(a, b) {\n      var hex = b.charCodeAt(0).toString(16).toUpperCase();\n      if (hex.length == 2) hex = '00' + hex;\n      if (hex.length == 3) hex = '0' + hex;\n      return '$' + hex;\n    };\n    var x = s.replace(MQLKEY_CHAR_MUSTQUOTE, convert);\n    if (x.charAt(0) == '-' || x.charAt(0) == '_') {\n      x = convert(x, x.charAt(0)) + x.substr(1);\n    }\n    return x;\n  }\n\n\n  freebase.category_list = function(q, options, callback) {\n    this.doc = \"get the freebase topics in a wikipedia category\"\n    var ps = fns.settle_params(arguments, freebase.category_list, {\n      depth: 1\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its not a wikipedia category\n    if (!ps.q.match(/Category:/)) {\n      ps.q = 'Category:' + ps.q\n    }\n    var all_topics = [];\n    var all_categories = [];\n    iterate(ps.q, '')\n\n    function iterate(cat, cmcontinue) {\n      var url = globals.wikipedia_host + \"?action=query&list=categorymembers&format=json&cmlimit=400&cmtitle=\" + encodeURIComponent(cat) + \"&cmcontinue=\" + cmcontinue;\n      fns.http(url, ps.options, function(r) {\n        if (!r || !r.query || !r.query.categorymembers || !r.query.categorymembers[Object.keys(r.query.categorymembers)[0]]) {\n          return ps.callback([])\n        }\n        all_categories = all_categories.concat(r.query.categorymembers.filter(function(v) {\n          return v.ns == 14\n        }));\n        var cmcontinue = r[\"query-continue\"] || {}\n        cmcontinue = cmcontinue.categorymembers || {}\n        cmcontinue = cmcontinue.cmcontinue || '';\n        var topics = r.query.categorymembers.filter(function(v) {\n          return v.ns == 0\n        });\n        topics = topics.map(function(v) {\n          return {\n            id: \"/wikipedia/en/\" + freebase.mql_encode(v.title),\n            article: 'http://en.wikipedia.org/wiki/index.html?curid=' + v.pageid,\n            title: v.title\n          }\n        })\n        all_topics = all_topics.concat(topics);\n        if (!cmcontinue) {\n          return ps.callback(all_topics)\n        } else {\n          iterate(cat, cmcontinue); //recurse\n        }\n      })\n    }\n  }\n  // freebase.category_list(\"Category:Redirects_from_plurals\")\n\n\n\n  freebase.wikipedia_subcategories = function(q, options, callback) {\n    this.doc = \"find the subcategories of this wikipedia category\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia_subcategories, {\n      depth: 1,\n      already: []\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its not a wikipedia category\n    if (!ps.q.match(/Category:/)) {\n      ps.q = 'Category:' + ps.q\n    }\n    var url = globals.wikipedia_host + \"?action=query&list=categorymembers&format=json&cmlimit=400&cmnamespace=14&cmtitle=\" + encodeURIComponent(ps.q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.categorymembers || !r.query.categorymembers[Object.keys(r.query.categorymembers)[0]]) {\n        return ps.callback([]);\n      }\n      var cats = r.query.categorymembers.map(function(v) {\n        return v.title\n      });\n      //remove if done already (for recursive cats)\n      cats = cats.filter(function(v) {\n        return !fns.isin(v, ps.options.already)\n      })\n      ps.options.already = fns.compact_strong(_.flatten(ps.options.already.concat(cats)));\n      if (ps.options.depth > 1 && cats.length > 0) {\n        ps.options.depth = ps.options.depth - 1;\n        return freebase.wikipedia_subcategories(cats, ps.options, function(r) {\n          ps.options.already = ps.options.already.concat(r)\n          return ps.callback(fns.compact_strong(_.flatten(ps.options.already)));\n        })\n      } else {\n        return ps.callback(ps.options.already)\n      }\n    })\n  }\n  //freebase.wikipedia_subcategories(\"Category:Enzymes\",{depth:20},function(r){console.log(JSON.stringify(r))})\n  //freebase.wikipedia_subcategories([\"Category:Toronto\",\"Category:Vancouver\"])\n\n\n  freebase.rdf = function(q, options, callback) {\n    this.doc = \"RDF api\"\n    this.reference = \"http://wiki.freebase.com/wiki/RDF\"\n    var ps = fns.settle_params(arguments, freebase.topic, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      var id = topic.id;\n      if (!id) {\n        return ps.callback({})\n      }\n      ps.options.filter = ps.options.filter || 'all'\n      var url = globals.host + \"rdf\" + id;\n      fns.http(url, ps.options, function(result) {\n        return ps.callback(result.body || '')\n      })\n    })\n  }\n  //freebase.rdf(\"toronto\")\n\n  freebase.wikipedia_to_freebase = function(q, options, callback) {\n    this.doc = \"turn a wikipedia title or url into a freebase topic\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia_to_freebase, {\n      depth: 1\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    ps.q = ps.q.replace(/^https?:\\/\\/..\\.wikipedia\\.org\\/wiki\\//, '');\n    var title = ps.q;\n    var obj = {\n      id: \"/wikipedia/en/\" + freebase.mql_encode(ps.q),\n      title: title\n    }\n    return ps.callback(obj)\n  }\n  // freebase.wikipedia_to_freebase(\"Tony Hawk\")\n\n\n\n  freebase.add_widget = function(obj) {\n    this.doc = \"add a generic html view of a topic\"\n    if (!obj || !id) {\n      return obj\n    }\n    var id = obj.mid || obj.id;\n    var html = '<a href=\"#\" class=\"imagewrap\" data-id=\"' + id + '\" style=\"position:relative; width:200px; height:200px;\">' + '<img style=\"border-radius:5px;\" src=\"' + globals.image_host + id + '?maxwidth=200&maxheight=200&errorid=/m/0djw4wd\"/>'\n    if (obj.name) {\n      html += '<div class=\"caption\" style=\"position:absolute; opacity:0.5; background:black; bottom:10px; color:white; left:10px; border-radius: 5px; min-width:100px; padding:5px;\">' + obj.name + '</div>'\n    }\n    html += '</a>'\n    obj.widget = html;\n    return obj;\n  }\n\n\n  //soften up the api so it will take these methods alternatively..\n\n  // for(var i in aliases){\n  //   aliases[i].map(function(v){\n  //     freebase[v]=freebase[i]\n  //     freebase[v].is_alias=true\n  //   })\n  // }\n\n  //\n  freebase.documentation = function(f, options, callback) {\n    callback = callback || console.log;\n    options = options || {};\n    var str = [];\n    str.push('Freebase.com nodejs-library')\n    str.push('https://github.com/spencermountain/Freebase-nodejs--');\n    if (f) {\n      if (freebase[f]) {\n        str.push(\" * \" + f)\n        var f = new freebase[f]()\n        str.push(f.doc)\n        return\n      } else {\n        str.push(\"Couldn't find the function \" + f + \". Here are the available functions:\")\n      }\n    }\n    Object.keys(freebase).map(function(f) {\n      str.push(\"* **\" + f + '** ')\n      var f = new freebase[f](null, {}, function() {})\n      str.push('     -' + f.doc)\n    })\n    if (options.html) {\n      str = str.join('<br/>')\n    } else {\n      str = str.join('\\n')\n    }\n    callback(str)\n  }\n  //freebase.documentation()\n\n  var aliases = {\n    mqlread: [\"query\", \"mql_read\"],\n    topic: [\"topic_api\", \"all_data\", \"data\", \"everything\", \"get_data\"],\n    paginate: [\"continue\", \"all\", \"each\"],\n    same_as_links: [\"sameas\", \"sameAs\", \"sameaslinks\", \"links\", \"sameas_links\", \"external_links\", \"weblinks\"],\n    translate: [\"translate_to\", \"multilingual\", \"i8n\", \"get_translation\"],\n    image: [\"pic\", \"photo\", \"picture\", \"get_image\", \"image_url\", \"image_src\"],\n    description: [\"get_description\", \"blurb\", \"get_blurb\", \"blurb_api\", \"text\", \"get_text\"],\n    notable: [\"notable_type\", \"notabletype\", \"notable_for\", \"notable_as\", \"main_type\", \"type\"],\n    place_data: [\"city\", \"country\", \"province\", \"place_info\", \"location_info\", \"location\", \"whereis\"],\n    incoming: [\"incoming_links\", \"incoming_nodes\", \"inlinks\"],\n    outgoing: [\"outgoing_links\", \"outgoing_nodes\", \"outlinks\"],\n    related: [\"related_topics\", \"similar\", \"related_to\", \"get_related\"],\n    gallery: [\"images\", \"get_images\"],\n    geolocation: [\"geo\", \"geocoordinates\", \"geo_location\", \"lat_lng\", \"location\"],\n    nearby: [\"near\", \"close_to\"],\n    inside: [\"inside_of\", \"within\", \"contained_by\", \"contains\"],\n    mql_encode: [\"encode\", \"escape\"]\n  }\n\n\n\n  // export for AMD / RequireJS\n  if (typeof define !== 'undefined' && define.amd) {\n    define([], function() {\n      return freebase;\n    });\n  }\n  // export for Node.js\n  else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = freebase;\n  }\n"]],"start1":0,"start2":0,"length1":0,"length2":65506}]],"length":65506,"saved":false}
