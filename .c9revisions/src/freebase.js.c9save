{"ts":1368005267761,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//By Spencer Kelly (@spencermountain)\n//https://github.com/spencermountain/Freebase-nodejs\n\n//if nodejs, load these modules, otherwise assume they're included\nif (typeof module !== 'undefined' && module.exports) {\n  var _ = require('underscore');\n  var async = require('async');\n  var fns = require('./helpers/helpers');\n  var data = require('./helpers/data.js').data;\n}\n\n  var freebase = {};\n\n  var globals = {\n    host: 'https://www.googleapis.com/freebase/v1/',\n    image_host: \"https://usercontent.googleapis.com/freebase/v1/image\",\n    geosearch: 'http://api.freebase.com/api/service/geosearch',\n    wikipedia_host: 'http://en.wikipedia.org/w/api.php',\n    generic_query: {\n      id: null,\n      name: null,\n      mid: null,\n      type: []\n    }\n  }\n\n  freebase.mqlread = function(query, options, callback) {\n    this.doc = \"interface to freebase's mql api\";\n    this.reference = \"http://wiki.freebase.com/wiki/MQL\";\n    callback = callback || console.log;\n    if (!query) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    options.uniqueness_failure = options.uniqueness_failure || \"soft\";\n    options.cursor = options.cursor || true;\n    fns.post(query, options, function(result) {\n      return callback(result)\n    })\n  }\n  //freebase.mqlread([{id:\"/en/radiohead\",name:null}])\n\n  freebase.lookup_id = function(q, options, callback) {\n    this.doc = \"generic info for an id\";\n    var ps = fns.settle_params(arguments, freebase.lookup, {\n      type: \"/common/topic\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var query = fns.clone(globals.generic_query);\n    query.id = ps.q;\n    freebase.mqlread([query], options, function(r) {\n      r = r.result || []\n      return ps.callback(r[0] || {})\n    })\n  }\n   //freebase.lookup_id('/en/radiohead')\n  // freebase.lookup_id('/m/07jnt')\n\n  freebase.search = function(q, options, callback) {\n    this.doc = \"regular search api\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\";\n    var ps = fns.settle_params(arguments, freebase.search, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    if (ps.is_id) {\n      return freebase.lookup_id(ps.q, ps.options, ps.callback);\n    }\n    //if its a url\n    if (ps.url) {\n      return freebase.url_lookup(ps.q, ps.options, function(result) {\n        if (result && result.result && result.result[0]) {\n          return ps.callback(result.result[0]);\n        }\n        return ps.callback({})\n      })\n    }\n    //if its an id\n    if (ps.is_id) {\n      ps.options.limit = 1;\n      return freebase.lookup_id(ps.q, ps.options, ps.callback)\n    }\n    ps.options.query = encodeURIComponent(ps.q);\n    var params = fns.set_params(ps.options)\n    var url = globals.host + 'search/?' + params;\n    if (ps.options.type == \"/type/type\" || ps.options.type == \"/type/property\") {\n      url += \"&scoring=schema&stemmed=true\"\n    }\n    fns.http(url, ps.options, function(result) {\n      if (!result || !result.result || !result.result[0]) {\n        return ps.callback([])\n      }\n      return ps.callback(result.result)\n    })\n  }\n  //freebase.search(\"bill murray\")\n  // freebase.search(\"/m/01sh40\")\n  //freebase.search(\"/en/radiohead\")\n\n  //*************\n  //slightly different lookup when its a url\n  freebase.url_lookup = function(q, options, callback) {\n    this.doc = \"freebase search tuned for looking up a url\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\"\n    var ps = fns.settle_params(arguments, freebase.url_lookup, {\n      type: \"/common/topic\",\n      strict: true\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var output = fns.clone(globals.generic_query);\n    var url = globals.host + 'search?type=/common/topic&limit=1&query=' + encodeURIComponent(ps.q);\n    url += \"&mql_output=\" + encodeURIComponent(JSON.stringify(output));\n    fns.http(url, ps.options, function(result) {\n      if (!result || !result.result) {\n        return ps.callback({})\n      }\n      var r = result.result || []\n      return ps.callback(r[0])\n    })\n  }\n  // freebase.url_lookup(\"http://myspace.com/u2\")\n\n\n  freebase.lookup = function(q, options, callback) {\n    this.doc = \"freebase search with filters to ensure only a confident, unambiguous result\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\"\n    var ps = fns.settle_params(arguments, freebase.lookup, {\n      type: \"/common/topic\",\n      strict: true\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its a url\n    if (ps.url) {\n      return freebase.url_lookup(ps.q, ps.options, ps.callback)\n    }\n    //if its an id\n    if (ps.is_id) {\n      ps.options.limit = 1;\n      return freebase.lookup_id(ps.q, ps.options, ps.callback)\n    }\n    //craft the url\n    var strength = ps.options.strength || \"full\";\n    if (!ps.options.strict) {\n      strength = \"word\"\n    }\n    var url = globals.host + 'search?limit=2&lang=en&type=' + ps.options.type + '&filter=';\n    var output = fns.clone(globals.generic_query);\n    url += encodeURIComponent('(any name{' + strength + '}:\"' + ps.q + '\" alias{' + strength + '}:\"' + ps.q + '\")');\n    if (ps.options.type == \"/type/type\" || ps.options.type == \"/type/property\") {\n      url += \"&scoring=schema&stemmed=true\"\n    }\n    url += \"&mql_output=\" + encodeURIComponent(JSON.stringify(output));\n    return fns.http(url, ps.options, function(result) {\n      if (!result || !result.result || !result.result[0]) {\n        return ps.callback({})\n      }\n      //filter-out shit results\n      result = result.result || []\n      result[0] = result[0] || {}\n      result[1] = result[1] || {}\n      //kill low-relevance\n      if (!result[0].score && result[0].score < 30) {\n        return ps.callback({})\n      }\n      if (ps.options.strict) {\n        //kill if 2nd result is also notable\n        if (((result[0].score || 0) * 0.7) < (result[1].score || 0)) {\n          return ps.callback({})\n        }\n      }\n      //kill if types are crap\n      if (result[1] && result[0].notable && fns.isin(result[0].notable.id, data.kill)) {\n        return ps.callback({})\n      }\n      result[0].name = result[0].name || result[0].text || '';\n      return ps.callback(result[0])\n    })\n  }\n  // freebase.lookup([\"/en/radiohead\", \"http://myspace.com/u2\"])\n  // freebase.lookup(\"/m/01sh40\")\n  //freebase.search(\"/en/radiohead\")\n  //freebase.lookup(\"pulp fiction\")\n\n\n\n  freebase.get_id = function(q, options, callback) {\n    this.doc = \"like freebase.lookup but satisfied with an id\"\n    this.reference = \"http://wiki.freebase.com/wiki/ApiSearch\"\n    var ps = fns.settle_params(arguments, freebase.get_id, {\n      type: \"/common/topic\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //is an id\n    if (!ps.q || (ps.q.match(/\\/.{1,32}\\/.{3}/) != null)) {\n      return ps.callback({\n        id: ps.q\n      })\n    }\n    //is a normal search\n    freebase.lookup(ps.q, ps.options, function(result) {\n      if (!result) {\n        return ps.callback({})\n      }\n      if (ps.options.type == \"/type/type\") {\n        result.mid = result.id;\n        return ps.callback(result)\n      }\n      if (result.mid) {\n        result.id = result.id || result.mid;\n        return ps.callback(result)\n      }\n      return ps.callback({})\n    })\n  }\n  //freebase.get_id(\"/en/radiohead\")\n\n  freebase.topic = function(q, options, callback) {\n    this.doc = \"topic api\"\n    this.reference = \"http://wiki.freebase.com/wiki/Topic_API\"\n    var ps = fns.settle_params(arguments, freebase.topic, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      var id = topic.id;\n      if (!id) {\n        return ps.callback({})\n      }\n      ps.options.filter = ps.options.filter || 'all'\n      var url = globals.host + 'topic' + id + '?' + fns.set_params(ps.options)\n      fns.http(url, ps.options, function(result) {\n        return ps.callback(result)\n      })\n    })\n  }\n  // freebase.topic(\"toronto\", {filter:\"allproperties\"})\n\n\n\n  freebase.paginate = function(query, options, callback) {\n    this.doc = \"get all of the results to your query\";\n    this.reference = \"http://wiki.freebase.com/wiki/MQL\";\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {}\n    callback = callback || console.log\n    options.max = options.max || 2000;\n    var all = [];\n    //recursive mqlread until cursor is false, or maximum reached\n    var iterate = function(cursor) {\n      options.cursor = cursor\n      freebase.mqlread(query, options, function(result) {\n        if (!result || !result.result) {\n          return callback(all);\n        }\n        all = all.concat(result.result);\n        if (result.cursor && (!options.max || all.length < options.max)) {\n          iterate(result.cursor)\n        } else {\n          return callback(all)\n        }\n      })\n    }\n    iterate('')\n  }\n  // freebase.paginate([{\"type\":\"/astronomy/moon\",\"name\":null, limit:1}],{max:10})\n\n  freebase.description = function(q, options, callback) {\n    this.doc = \"get a text blurb from freebase\";\n    this.reference = \"http://wiki.freebase.com/wiki/ApiText\"\n    var ps = fns.settle_params(arguments, freebase.description, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var url = globals.host + 'text/' + topic.id;\n      fns.http(url, ps.options, function(result) {\n        if (!result.result) {\n          return ps.callback('')\n        }\n        return ps.callback(result.result)\n      })\n    });\n  }\n\n\n  freebase.image = function(q, options, callback) {\n    this.doc = \"get a url for image href of on this topic\"\n    this.reference = \"http://wiki.freebase.com/wiki/ApiImage\"\n    var ps = fns.settle_params(arguments, freebase.image, {\n      maxheight: 250,\n      maxwidth: 250,\n      errorid: \"/m/0djw4wd\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"/common/topic/image\": [{\n          \"id\": null\n        }]\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (!result || !result.result || !result.result[0] || !result.result[0][\"/common/topic/image\"][0]) {\n          return ps.callback('');\n        }\n        var url = globals.image_host + result.result[0][\"/common/topic/image\"][0].id;\n        var params = fns.set_params(ps.options);\n        url += '?' + params;\n        return ps.callback(url)\n      })\n    })\n  }\n  //freebase.image('radiohead',{type:\"/music/artist\"})\n\n  freebase.grammar = function(q, options, callback) {\n    this.doc = \"get the proper pronoun to use for a topic eg. he/she/they/it\"\n    var ps = fns.settle_params(arguments, freebase.grammar, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback({})\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"type\": [],\n        \"/people/person/gender\": [{\n          \"id\": null,\n          \"optional\": true\n        }],\n        \"/fictional_universe/fictional_character/gender\": [{\n          \"id\": null,\n          \"optional\": true\n        }]\n      }]\n      freebase.mqlread(query, options, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback({})\n        }\n        result = result.result[0];\n        var grammar = {\n          plural: false,\n          gender: null,\n          article: \"a\",\n          pronoun: \"it\",\n          copula: \"is\"\n        }\n        //people grammar\n        if (fns.isin('/people/person', result.type) || fns.isin('/fictional_universe/fictional_character', result.type)) {\n          var gender = result[\"/people/person/gender\"][0] || result[\"/fictional_universe/fictional_character/gender\"][0];\n          if (gender) {\n            if (gender.id == \"/en/male\") { //male\n              grammar.gender = \"male\";\n              grammar.pronoun = \"he\";\n            } else if (gender.id == \"/en/female\") { //female\n              grammar.gender = \"female\";\n              grammar.pronoun = \"she\";\n            }\n          } else { //no gender person\n            grammar.gender = \"unknown\";\n            grammar.pronoun = \"they\";\n          }\n        } else { //not a person\n          //plural topics\n          if (_.intersection(data.plural_types, result.type).length > 0) {\n            grammar.plural = true;\n            grammar.pronoun = \"they\";\n            grammar.copula = \"are\"\n          }\n          //categories that need a 'the' instead of 'a'\n          if (_.intersection(data.definate_articles, result.type).length > 0) {\n            grammar.article = \"the\";\n          }\n        }\n        return ps.callback(grammar);\n      })\n    })\n  }\n  //freebase.grammar(\"toronto maple leafs\")\n\n  freebase.same_as_links = function(q, options, callback) {\n    this.doc = \"turns a url into a freebase topic and list its same:as links\"\n    var ps = fns.settle_params(arguments, freebase.same_as_links, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    var url = globals.host + 'search?type=/common/topic&limit=1&query=' + encodeURIComponent(ps.q);\n    fns.http(url, ps.options, function(result) {\n      if (!result || !result.result || !result.result[0]) {\n        return ps.callback({})\n      }\n      //get its formatted links from the topic api\n      freebase.topic(result.result[0].mid, ps.options, function(all) {\n        if (_.isEmpty(all)) {\n          return ps.callback([]);\n        }\n        var links = [];\n        //same-as ones\n        if (all.property['/common/topic/topic_equivalent_webpage']) {\n          links = all.property['/common/topic/topic_equivalent_webpage'].values.map(function(v) {\n            return {\n              href: v.value,\n              title: fns.parseurl(v.value).authority\n            }\n          })\n        }\n        //webpage ones\n        if (all.property['/common/topic/topical_webpage']) {\n          links = links.concat(all.property['/common/topic/topical_webpage'].values.map(function(v) {\n            var host = fns.parseurl(v.value).authority || ''\n            return {\n              href: v.value,\n              title: host.replace(/^www\\./, '')\n            }\n          }))\n        }\n        var obj = {\n          topic: result.result[0],\n          links: links\n        }\n        return ps.callback(obj)\n      })\n    })\n  }\n\n\n  freebase.translate = function(q, options, callback) {\n    this.doc = \"return specific language title for a topic\"\n    this.reference = \"http://wiki.freebase.com/wiki/I18n\"\n    var ps = fns.settle_params(arguments, freebase.translate, {\n      lang: \"/lang/fr\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    if (!ps.options.lang.match(/\\/lang\\//)) {\n      ps.options.lang = '/lang/' + ps.options.lang\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": [{\n          \"lang\": ps.options.lang,\n          \"value\": null\n        }]\n      }]\n      freebase.mqlread(query, {}, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback('')\n        }\n        var name = result.result[0].name || [{}]\n        name = name[0].value || '';\n        return ps.callback(name)\n      })\n    })\n  }\n\n\n  freebase.notable = function(q, options, callback) {\n    this.doc = \"get a topic's notable type\"\n    var ps = fns.settle_params(arguments, freebase.notable, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    freebase.topic(ps.q, {\n      filter: \"/common/topic/notable_types\"\n    }, function(result) {\n      if (!result || !result.property || !result.property['/common/topic/notable_types']) {\n        return ps.callback({})\n      }\n      var notable = result.property['/common/topic/notable_types'] || {\n        values: []\n      };\n      notable.values[0].name = notable.values[0].text;\n      return ps.callback(notable.values[0])\n    });\n  }\n\n  freebase.sentence = function(q, options, callback) {\n    this.doc = \"get the first sentence of a topic description\"\n    this.reference = \"http://wiki.freebase.com/wiki/APIText\"\n    var ps = fns.settle_params(arguments, freebase.sentence, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback(ps);\n    }\n\n    freebase.description(ps.q, ps.options, function(desc) {\n      if (!desc) {\n        return ps.callback(\"\")\n      }\n      desc = fns.sentenceparser(desc) || []\n      desc = desc[0] || ''\n      desc = desc.replace(/\\(.*?\\)/g, '') //remove birthdates\n      desc = desc.replace(/  /g, ' ')\n      return ps.callback(desc)\n    })\n  }\n  //freebase.sentence(['radiohead','john malkovich'],{},console.log)\n\n  freebase.list = function(q, options, callback) {\n    this.doc = \"get a list of topics in a type\"\n    var ps = fns.settle_params(arguments, freebase.list, {\n      limit: 2000\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback([]);\n    }\n    //singularize it if its not an id\n    if (!ps.q.match(/\\/.{1,12}\\/.{3}/)) {\n      ps.q = fns.singularize(ps.q);\n    }\n    //get its id\n    freebase.get_id(ps.q, {\n      type: \"/type/type\"\n    }, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback([])\n      }\n      var query = [{\n        \"type\": topic.id,\n        \"name\": null,\n        \"id\": null,\n        \"mid\": null,\n        \"limit\": 100\n      }]\n      if (ps.options.extend) {\n        for (var i in ps.options.extend) {\n          query[0][i] = ps.options.extend[i]\n        }\n      }\n      freebase.paginate(query, ps.options, ps.callback)\n    })\n  }\n  //freebase.list(\"hurricanes\",{}, function(r){console.log(r)})\n\n\n  freebase.place_data = function(geo, options, callback) {\n    this.doc = \"from a geo-coordinate, get the town, province, country, and timezone for it\"\n    callback = callback || console.log;\n    if (!geo) {\n      return callback({})\n    }\n    options = options || {};\n    //handle an array\n    if (_.isArray(geo) && geo.length > 1) {\n      return fns.doit_async(geo, freebase.place_data, options, callback)\n    }\n    var location = {\n      \"coordinates\": [geo.lng, geo.lat],\n      \"type\": \"Point\"\n    }\n    var out = [{\n      \"mid\": null,\n      \"name\": null,\n      \"type\": []\n    }]\n    var url = globals.geosearch + '?location=' + encodeURIComponent(JSON.stringify(location)) + '&order_by=distance&limit=1&type=/location/citytown&within=15&format=json&mql_output=' + encodeURIComponent(JSON.stringify(out))\n    fns.http(url, options, function(r) {\n      var all = {\n        city: null,\n        country: null,\n        province: null,\n        timezone: null\n      }\n      all.city = r.result.features[0].properties;\n      var query = [{\n        \"name\": null,\n        \"id\": r.result.features[0].properties.mid,\n        \"/location/location/containedby\": [{\n          \"id\": null,\n          \"name\": null,\n          \"type\": [],\n          \"optional\": true,\n          \"/location/location/time_zones\": [{\n            \"/time/time_zone/offset_from_uct\": null,\n            \"id\": null,\n            \"name\": null,\n            \"optional\": true\n          }],\n          \"/location/location/containedby\": [{\n            \"id\": null,\n            \"name\": null,\n            \"type\": [],\n            \"optional\": true,\n            \"/location/location/time_zones\": [{\n              \"/time/time_zone/offset_from_uct\": null,\n              \"id\": null,\n              \"name\": null,\n              \"optional\": true\n            }]\n          }]\n        }]\n      }]\n      freebase.mqlread(query, {}, function(r) {\n        //hunt for the most appropriate topics in 2 layers\n        for (var i in r.result[0]['/location/location/containedby']) {\n          var v = r.result[0]['/location/location/containedby'][i]\n          if (v.type.filter(function(t) {\n            return t == \"/location/country\"\n          })[0]) {\n            all.country = {\n              id: v.id,\n              name: v.name\n            }\n          } else if (v.type.filter(function(t) {\n            return t == \"/location/administrative_division\"\n          })[0]) {\n            all.province = {\n              id: v.id,\n              name: v.name\n            }\n          }\n          if (v[\"/location/location/time_zones\"][0] && v[\"/location/location/time_zones\"].length == 1) {\n            all.timezone = v[\"/location/location/time_zones\"][0];\n          }\n          if (all.country) {\n            return callback(all)\n          }\n          //second layer looks good too\n          v['/location/location/containedby'].map(function(o) {\n            if (o.type.filter(function(t) {\n              return t == \"/location/country\"\n            })[0]) {\n              all.country = {\n                id: o.id,\n                name: o.name\n              }\n            } else if (!all.province && o.type.filter(function(t) {\n              return t == \"/location/administrative_division\"\n            })[0]) {\n              all.province = {\n                id: o.id,\n                name: o.name\n              }\n            }\n            if (!all.timezone && o[\"/location/location/time_zones\"][0] && o[\"/location/location/time_zones\"].length == 1) {\n              all.timezone = o[\"/location/location/time_zones\"][0];\n            }\n          })\n        }\n        return callback(all)\n      })\n\n    })\n  }\n  //  freebase.place_data({lat:51.545414293637286,lng:-0.07589578628540039}, {}, console.log)\n\n\n  freebase.incoming = function(q, options, callback) {\n    this.doc = \"get any incoming data to this topic, ignoring cvt types\"\n    var ps = fns.settle_params(arguments, freebase.incoming, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback([])\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"/type/reflect/any_reverse\": [{\n          \"link\": null,\n          \"id\": null,\n          \"name\": null,\n          \"type\": \"/common/topic\",\n          \"limit\": 170\n        }]\n      }]\n      //this technically doesn't paginate.\n      freebase.paginate(query, ps.options, function(result) {\n        if (!result || !result[0] || !result[0]['/type/reflect/any_reverse']) {\n          return ps.callback([])\n        }\n        return ps.callback(result[0]['/type/reflect/any_reverse'])\n      })\n    })\n  }\n\n  freebase.outgoing = function(q, options, callback) {\n    this.doc = \"return all outgoing links for a topic, traversing cvt types\"\n    var ps = fns.settle_params(arguments, freebase.outgoing, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n\n    freebase.lookup(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.mid) {\n        return ps.callback([])\n      }\n      freebase.topic(topic.mid, ps.options, function(result) {\n        if (_.isEmpty(result)) {\n          return ps.callback([]);\n        }\n        var out = [];\n        //get rid of permissions and stuff..\n        result.property = fns.kill_boring(result.property)\n        Object.keys(result.property).forEach(function(key) {\n          var v = result.property[key];\n          //add topics\n          if (v.valuetype == \"object\") {\n            v.values = v.values.map(function(s) {\n              s.property = key;\n              return s\n            })\n            out = out.concat(v.values)\n          }\n          //add the topics from cvt values in the same manner\n          if (v.valuetype == \"compound\") {\n            v.values.forEach(function(c) {\n              c.property = fns.kill_boring(c.property);\n              Object.keys(c.property).forEach(function(key2) {\n                if (c.property[key2].valuetype == \"object\") {\n                  c.property[key2].values = c.property[key2].values.map(function(s) {\n                    s.property = [key, key2];\n                    return s\n                  })\n                  out = out.concat(c.property[key2].values)\n                }\n              })\n            })\n          }\n        })\n        out = out.map(function(o) {\n          return {\n            name: o.text,\n            id: o.id,\n            property: o.property\n          }\n        })\n        //add sentence-forms\n        out = out.map(function(o) {\n          var property = o.property || '';\n          if (_.isArray(o.property)) {\n            property = o.property.join('');\n          }\n          o.sentence = topic.name + \"'s \" + _.last(property.split('/')).replace('_', ' ') + \" is \" + o.name; //ugly fallback\n          var grammar = data.sentence_grammars.filter(function(v) {\n            return v.id == property\n          })[0] || {}\n          if (grammar[\"sen\"] && topic.name && o.name) {\n            o.sentence = grammar[\"sen\"].replace(/\\bsubj\\b/, topic.name).replace(/\\bobj\\b/, o.name);\n          }\n          return o\n        })\n        return ps.callback(out)\n      })\n    })\n  }\n  //freebase.outgoing(\"vancouver\")\n\n  freebase.graph = function(q, options, callback) {\n    this.doc = \"return all outgoing and incoming links for a topic\"\n    var ps = fns.settle_params(arguments, freebase.graph, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.lookup(ps.q, ps.options, function(topic) {\n      if (!topic) {\n        return ps.callback({})\n      }\n      delete topic.score;\n      delete topic.lang;\n      ps.options.filter = \"allproperties\";\n      freebase.topic(topic.mid, ps.options, function(r) {\n        if (!r || !r.property) {\n          return ps.callback([])\n        }\n        var incoming = {};\n        var outgoing = {};\n        Object.keys(r.property).forEach(function(k) {\n          if (k.match(/^\\!/)) {\n            outgoing[k] = r.property[k]\n          } else {\n            incoming[k] = r.property[k]\n          }\n        })\n        incoming = fns.parse_topic_api(incoming);\n        outgoing = fns.parse_topic_api(outgoing);\n        var out = incoming.map(function(v) {\n          return {\n            subject: topic,\n            property: {\n              id: v.property\n            },\n            object: v,\n            direction: \"outgoing\"\n          }\n        })\n        out = out.concat(outgoing.map(function(v) {\n          return {\n            object: topic,\n            property: {\n              id: v.property\n            },\n            subject: v,\n            direction: \"incoming\"\n          }\n        }))\n        //add the sentences\n        out = out.map(function(obj) {\n          obj.property.id = obj.property.id.replace(/^\\!/, '');\n          delete obj.subject.property;\n          var grammar = data.sentence_grammars.filter(function(v) {\n            return v.id == obj.property.id\n          })[0] || {}\n          obj.sentence = obj.subject.name + \"'s \" + _.last(obj.property.id.split('/')).replace('_', ' ') + \" is \" + obj.object.name;\n          if (grammar[\"sen\"] && obj.subject.name && obj.object.name) {\n            obj.sentence = grammar[\"sen\"].replace(/\\bsubj\\b/, obj.subject.name).replace(/\\bobj\\b/, obj.object.name);\n          }\n          return obj\n        })\n        return ps.callback(out)\n      })\n    })\n  }\n  //freebase.graph(\"toronto\")\n  // freebase.graph(\"/m/07jnt\")\n  //freebase.graph(\"shawshank redemption\")\n\n  freebase.related = function(q, options, callback) {\n    this.doc = \"get similar topics to a topic\"\n    var ps = fns.settle_params(arguments, freebase.related, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var all = [];\n    //pluck relevant connected topics from outgoing links\n    freebase.outgoing(ps.q, ps.options, function(result) {\n      all = result.filter(function(v) {\n        return fns.isin(v.property, data.related_properties)\n      })\n      //randomize the results\n      all = all.sort(function(a, b) {\n        return (Math.round(Math.random()) - 0.5);\n      })\n      all = all.map(function(v) {\n        if (!v.sentence) {\n          v.sentence = v.name + \" is related to \" + result.name\n        }\n        return v\n      })\n      all = fns.json_unique(all, \"id\")\n      if (all.length >= options.max) {\n        return ps.callback(all)\n      }\n      //else, append topics that share the notable type\n      freebase.notable(ps.q, ps.options, function(result) {\n        if (result && result.id) {\n          return freebase.list(result.id, {\n            max: ps.options.max\n          }, function(r) {\n            if (!r || _.isEmpty(r)) {\n              return ps.callback(all)\n            }\n            r = r.map(function(v) {\n              v.sentence = v.name + \" is also a \" + result.name;\n              return v\n            })\n            all = all.concat(r); //todo\n            all = fns.json_unique(all, \"id\")\n            all = all.sort(function(a, b) {\n              return (Math.round(Math.random()) - 0.5);\n            })\n            return ps.callback(all)\n          })\n        } else {\n          return ps.callback(all)\n        }\n      })\n    })\n  }\n  /*freebase.related(\"toronto\", {}, function(r){\n  console.log(JSON.stringify(r, null, 2));\n})*/\n\n  freebase.is_a = function(q, options, callback) {\n    this.doc = \"get a list of identifiers for a topic\"\n    var ps = fns.settle_params(arguments, freebase.related, {\n      max: 25\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.topic(ps.q, ps.options, function(r) {\n      if (_.isEmpty(r)) {\n        return ps.callback({});\n      }\n      var types = r.property[\"/type/object/type\"] || {}\n      types = types.values || []\n      types = types.filter(function(v) {\n        return !v.text.match(/Topic/)\n      })\n      types = types.map(function(v) {\n        return {\n          name: v.text,\n          id: v.id,\n          property: \"/type/object/type\"\n        }\n      })\n      r = fns.parse_topic_api(r.property)\n      r = r.filter(function(v) {\n        return fns.isin(v.property, data.is_a)\n      })\n      r = r.concat(types)\n      return ps.callback(r)\n    })\n  }\n  //freebase.is_a(\"toronto\")\n\n  freebase.property_lookup = function(q, options, callback) {\n    this.doc = \"lookup soft property matches, like 'birthday' vs 'date of birth'\"\n    var ps = fns.settle_params(arguments, freebase.property_lookup, {\n      type: \"/type/property\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.search(ps.q, ps.options, function(candidate_properties) {\n      //look up offline for property aliases\n      if (!q.match(/\\/.*?\\/.*?\\//)) {\n        q = q.toLowerCase();\n        q = q.replace(/  /, ' ');\n        q = q.replace(/^\\s+|\\s+$/, '');\n        var property_singular = fns.singularize(q);\n        candidate_properties = candidate_properties.concat(data.properties.filter(function(v) {\n          return v.n == q || v.n == property_singular\n        }))\n      }\n      return ps.callback(candidate_properties)\n    })\n  }\n  //freebase.property_lookup(\"albums\")\n\n\n  freebase.question = function(q, options, callback) {\n    this.doc = \"give a topic and a property, and get a list of results\"\n    var ps = fns.settle_params(arguments, freebase.question, {\n      max: 25\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid || !ps.options.property) {\n      return ps.callback({});\n    }\n    var property = ps.options.property\n    var type = ps.options.property.match(/\\/.*?\\/.*?\\//)\n\n    //straight-up id search\n    if (property.match(/^\\/.{1,12}\\/.{3}/)) {\n      return freebase.topic(q, {}, function(r) {\n        if (!r || !r.property || !r.property[property]) {\n          return ps.callback([])\n        }\n        return ps.callback(r.property[property].values)\n      })\n    }\n    var candidate_metaschema = fns.metaschema_lookup(property);\n    if (candidate_metaschema) {\n      ps.options.filter = '(all ' + candidate_metaschema + ':\"' + q + '\")'\n      freebase.search('', options, function(result) {\n        return ps.callback(result)\n      })\n    } else {\n      freebase.property_lookup(property, {}, function(candidate_properties) {\n        if (candidate_properties.length === 0) {\n          return ps.callback([])\n        }\n        ps.options.filter = type;\n        //look for these properties in the topic api\n        freebase.topic(ps.q, ps.options, function(result) {\n          if (_.isEmpty(result)) {\n            return ps.callback({});\n          }\n          var all = [];\n          candidate_properties.forEach(function(p) {\n            if (result.property[p.id]) {\n              all = all.concat(result.property[p.id].values)\n            }\n          })\n          all = fns.json_unique(all, \"id\")\n          return ps.callback(all)\n        })\n      })\n    }\n  }\n  //freebase.question(\"keanu reeves\", {property:\"children\"})\n  //freebase.question(\"thom yorke\", \"produced\") //******\n  //freebase.question(\"pulp fiction\", {property:\"/film/film/initial_release_date\"})\n  //freebase.question(\"keanu reeves\",\"films\") //******\n\n\n  freebase.dig = function(q, options, callback) {\n    this.doc = \"transitive query on a specific property, maximum 3-ply\"\n    var ps = fns.settle_params(arguments, freebase.property_lookup, {\n      max: 25\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var all = [];\n    freebase.question(ps.q, ps.options, function(r) {\n      if (!r || !_.isArray(r) || r.length === 0) {\n        return ps.callback(all)\n      }\n      all = all.concat(r);\n      r = r.slice(0, ps.options.max).map(function(v) {\n        return v.id\n      })\n      return fns.doit_async({\n        q: r,\n        options: ps.options,\n        method: freebase.question,\n        callback: function(big) {\n          if (!big || !_.isArray(big) || big.length === 0) {\n            return ps.callback(all)\n          }\n          all = all.concat(_.flatten(big, 'shallow'))\n          all = fns.json_unique(all, \"id\")\n          fns.doit_async(r, freebase.question, ps.options, function(big) {\n            if (!big || !_.isArray(big) || big.length === 0) {\n              return ps.callback(all)\n            }\n            all = all.concat(_.flatten(big, 'shallow'))\n            all = fns.json_unique(all, \"id\")\n            return ps.callback(all)\n          })\n        }\n      })\n    })\n  }\n  // freebase.dig('/en/bovid', {property:'/biology/organism_classification/lower_classifications'}, function(r){\n  //   console.log(r)\n  // })\n  // freebase.dig('/en/toronto', {property:'/location/location/contains'}, function(r){\n  //   console.log(r)\n  // })\n\n  freebase.gallery = function(q, options, callback) {\n    this.doc = \"list of topics with images\"\n    var ps = fns.settle_params(arguments, freebase.gallery, {\n      extend: {\n        \"/common/topic/image\": [{\n          \"id\": null,\n          \"optional\": \"required\"\n        }]\n      }\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.list(ps.q, ps.options, function(result) {\n      result = result.map(function(obj) {\n        obj.href = globals.image_host + _.last(obj[\"/common/topic/image\"]).id;\n        obj.thumbnail = globals.image_host + _.last(obj[\"/common/topic/image\"]).id + '?mode=fillcropmid&maxwidth=150&maxheight=150&errorid=/m/0djw4wd';\n        obj = freebase.add_widget(obj)\n        return obj;\n      })\n      return ps.callback(result)\n    })\n  }\n  // freebase.gallery('hurricanes') //******\n\n\n  freebase.wordnet = function(q, options, callback) {\n    this.doc = \"query wordnet via freebase\"\n    var ps = fns.settle_params(arguments, freebase.wordnet, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    var query = [{\n      \"id\": null,\n      \"type\": \"/base/wordnet/synset\",\n      \"gloss\": null,\n      \"syntactic_category\": null,\n      \"sort\": [\n        \"syntactic_category\",\n        \"word.sense_number\",\n        \"a:word.word_number\"],\n      \"word\": {\n        \"sense_number\": null,\n        \"derivationally_related_forms\": [{\n          \"sense\": {\n            \"name\": null,\n            \"id\": null\n          },\n          \"optional\": true\n        }],\n        \"word\": {\n          \"word\": ps.q\n        }\n      },\n      \"a:word\": [{\n        \"word_number\": null,\n        \"word\": {\n          \"word\": null\n        }\n      }]\n    }]\n    if (ps.options.limit) {\n      query[0].limit = ps.options.limit;\n    }\n    freebase.mqlread(query, ps.options, function(r) {\n      return ps.callback(r.result)\n    })\n  }\n\n\n  freebase.transitive = function transitive(q, options, callback) {\n    this.doc = \"do a transitive-query, like all rivers in canada, using freebase metaschema\"\n    var ps = fns.settle_params(arguments, freebase.transitive, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback({})\n      }\n      var candidate_metaschema = fns.metaschema_lookup(ps.options.property);\n      if (candidate_metaschema) {\n        options.filter = '(all ' + candidate_metaschema + ':\"' + topic.id + '\")'\n        freebase.search('', ps.options, function(result) {\n          return ps.callback(result)\n        })\n      } else {\n        return ps.callback([])\n      }\n    })\n  }\n  //*******\n\n  freebase.geolocation = function(q, options, callback) {\n    this.doc = \"lat/long for a topic\"\n    var ps = fns.settle_params(arguments, freebase.geolocation, {\n      type: \"/location/location\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback({})\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"/location/location/geolocation\": [{\n          \"latitude\": null,\n          \"longitude\": null,\n          \"type\": \"/location/geocode\",\n          \"optional\": true\n        }]\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (result.result && result.result[0] && result.result[0]['/location/location/geolocation'][0]) {\n          var geo = result.result[0]['/location/location/geolocation'][0];\n          delete geo.type;\n          delete geo.optional;\n          return ps.callback(geo);\n        }\n        return ps.callback({})\n      })\n    })\n  }\n  //freebase.geolocation(\"cn tower\")\n\n  freebase.nearby = function(q, options, callback) {\n    this.doc = \"list of topics nearby a location\"\n    var ps = fns.settle_params(arguments, freebase.nearby, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.geolocation(ps.q, {}, function(geo) {\n      if (!geo || !geo.latitude || !geo.longitude) {\n        return ps.callback([])\n      }\n      //use the *old* freebase api for this, as there's no alternative in the new one\n      var location = '{\"coordinates\":[' + geo.longitude + ',' + geo.latitude + '],\"type\":\"Point\"}'\n      ps.options.within = ps.options.within || 5;\n      ps.options.type = ps.options.type || \"/location/location\";\n      var url = globals.geosearch + '?location=' + encodeURIComponent(location) + '&order_by=distance&type=' + ps.options.type + '&within=' + ps.options.within + '&limit=200&format=json'\n      fns.http(url, ps.options, function(r) {\n        return ps.callback(r.result.features)\n      })\n    })\n  }\n  //freebase.nearby(\"cn tower\", {type:\"/food/restaurant\"}, console.log)\n\n\n  freebase.inside = function(q, options, callback) {\n    this.doc = \"list of topics inside a location\"\n    var ps = fns.settle_params(arguments, freebase.inside, {\n      property: \"part_of\"\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //handy to have their geocoordinates too\n    ps.options.mql_output = ps.options.mql_output || [{\n      \"name\": null,\n      \"id\": null,\n      \"type\": \"/location/location\",\n      \"/location/location/geolocation\": [{\n        \"latitude\": null,\n        \"longitude\": null,\n        \"type\": \"/location/geocode\",\n        \"optional\": true\n      }]\n    }]\n    freebase.transitive(ps.q, ps.options, function(r) {\n      return ps.callback(r)\n    })\n  }\n  //freebase.inside(\"montreal\")//***********\n\n\n  freebase.wikipedia_page = function(q, options, callback) {\n    this.doc = \"get a url for wikipedia based on this topic\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"key\": {\n          \"namespace\": \"/wikipedia/en_title\",\n          \"value\": null\n        }\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback('')\n        }\n        return ps.callback('http://en.wikipedia.org/wiki/' + fns.mql_unencode(result.result[0].key.value))\n      })\n    })\n  }\n  //freebase.wikipedia_page('toronto')\n\n  freebase.dbpedia_page = function(q, options, callback) {\n    this.doc = \"get a url for dbpedia based on this topic\"\n    var ps = fns.settle_params(arguments, freebase.dbpedia, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback(\"\")\n      }\n      var query = [{\n        \"id\": topic.id,\n        \"name\": null,\n        \"key\": {\n          \"namespace\": \"/wikipedia/en_title\",\n          \"value\": null\n        }\n      }]\n      freebase.mqlread(query, ps.options, function(result) {\n        if (!result || !result.result || !result.result[0]) {\n          return ps.callback({})\n        }\n        var key = fns.mql_unencode(result.result[0].key.value)\n        var obj = {\n          html: 'http://dbpedia.org/page/' + key,\n          json: 'http://dbpedia.org/data/' + key + '.json',\n        }\n        return ps.callback(obj)\n      })\n    })\n  }\n  //freebase.dbpedia_page('toronto')\n\n  freebase.wikipedia_categories = function(q, options, callback) {\n    this.doc = \"get the wikipedia categories for a topic\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia_categories, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its not a wikipedia title, reuse get-topic logic for searches/ids\n    if (ps.q.match(/ /) || ps.q.substr(0, 1) == ps.q.substr(0, 1).toLowerCase() || ps.q.match(/^\\//)) {\n      return freebase.wikipedia_page(ps.q, options, function(r) {\n        freebase.wikipedia_categories(r, options, ps.callback)\n      })\n    }\n    var url = globals.wikipedia_host + '?action=query&prop=categories&format=json&clshow=!hidden&cllimit=200&titles=' + encodeURIComponent(ps.q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]) {\n        return ps.callback([])\n      }\n      var cats = r.query.pages[Object.keys(r.query.pages)[0]].categories || []\n      cats = cats.map(function(v) {\n        return v.title\n      })\n      return ps.callback(cats)\n    })\n  }\n  //freebase.wikipedia_categories([\"Thom Yorke\",\"Toronto\"], {}, console.log)\n  //freebase.wikipedia_categories(\"Thom Yorke\", {}, console.log)//****\n\n  freebase.wikipedia_links = function(q, options, callback) {\n    this.doc = \"outgoing links from this wikipedia page, converted to freebase ids\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.wikipedia_links, options, callback)\n    }\n    //if its not a wikipedia title, reuse get-topic logic for searches/ids\n    if (q.match(/ /) || q.substr(0, 1) == q.substr(0, 1).toLowerCase() || q.match(/^\\//)) {\n      return freebase.wikipedia_page(q, options, function(r) {\n        freebase.wikipedia_links(r, options, callback)\n      })\n    }\n    var url = globals.wikipedia_host + '?action=query&prop=links&format=json&plnamespace=0&pllimit=500&titles=' + encodeURIComponent(q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]) {\n        return callback([])\n      }\n      var links = r.query.pages[Object.keys(r.query.pages)[0]].links || []\n      //filter-out non-freebase topics\n      links = links.filter(function(v) {\n        return v.title.match(/^List of /i) == null\n      })\n      links = links.map(function(o) {\n        o.id = \"/wikipedia/en/\" + freebase.mql_encode(o.title.replace(/ /g, '_'));\n        o.name = o.title;\n        delete o.title;\n        delete o.ns;\n        return o\n      })\n      return callback(links)\n    })\n  }\n  //freebase.wikipedia_links(\"Toronto\", {}, console.log)\n\n  freebase.wikipedia_external_links = function(q, options, callback) {\n    this.doc = \"outgoing links from this wikipedia page, converted to freebase ids\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.wikipedia_external_links, options, callback)\n    }\n    //if its not a wikipedia title, reuse get-topic logic for searches/ids\n    if (q.match(/ /) || q.substr(0, 1) == q.substr(0, 1).toLowerCase() || q.match(/^\\//)) {\n      return freebase.wikipedia_page(q, options, function(r) {\n        freebase.wikipedia_external_links(r, options, callback)\n      })\n    }\n    var url = globals.wikipedia_host + '?action=query&prop=extlinks&format=json&plnamespace=0&pllimit=500&titles=' + encodeURIComponent(q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]) {\n        return callback([])\n      }\n      var links = r.query.pages[Object.keys(r.query.pages)[0]].extlinks || []\n      links = links.filter(function(v) {\n        return v[\"*\"].match(/^http/)\n      })\n      links = links.map(function(v) {\n        var box = fns.parseurl(v[\"*\"]);\n        return {\n          url: v[\"*\"],\n          domain: box.host\n        }\n      })\n      return callback(links)\n    })\n  }\n  //freebase.wikipedia_external_links(\"/en/toronto\", {}, console.log)\n\n\n  freebase.schema = function(q, options, callback) {\n    this.doc = \"common lookups for types and properties\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.schema, options, callback)\n    }\n    //see if its a type\n    freebase.search(q, {\n      type: \"/type/type\"\n    }, function(r) {\n      if (r && r[0] && r[0].id) {\n        r = r[0]\n        var query = [{\n          \"id\": r.id,\n          \"mid\": null,\n          \"name\": null,\n          \"properties\": [{\n            \"id\": null,\n            \"name\": null,\n            \"/type/property/reverse_property\": [{\n              \"id\": null,\n              \"name\": null,\n              \"optional\": true\n            }]\n          }],\n          \"/freebase/type_hints/mediator\": null,\n          \"/freebase/type_hints/included_types\": [{\n            \"id\": null,\n            \"name\": null\n          }],\n          \"/freebase/type_profile/published\": null,\n          \"/type/type/expected_by\": [{\n            \"id\": null,\n            \"name\": null\n          }],\n          \"/freebase/type_profile/instance_count\": null,\n          \"/freebase/type_profile/property_count\": null,\n          \"domain\": {\n            \"id\": null,\n            \"name\": null\n          },\n          \"/freebase/type_profile/equivalent_topic\": {\n            \"id\": null,\n            \"name\": null\n          },\n          \"type\": \"/type/type\"\n        }]\n        freebase.mqlread(query, {}, function(r) {\n          if (!r || !r.result || !r.result[0]) {\n            return callback({})\n          }\n          r = r.result[0]\n          var obj = {}\n          obj.domain = r.domain\n          obj.id = r.id\n          obj.included_types = r[\"/freebase/type_hints/included_types\"]\n          obj.incoming_properties = r[\"/type/type/expected_by\"]\n          obj.is_compound_value = r[\"/freebase/type_hints/mediator\"] || false\n          obj.is_commons = r[\"/freebase/type_profile/published\"] || false\n          obj.equivalent_topic = r[\"/freebase/type_profile/equivalent_topic\"]\n          obj.topic_count = r[\"/freebase/type_profile/instance_count\"] || 0\n          obj.property_count = r[\"/freebase/type_profile/property_count\"] || 0;\n          //types that include this one\n          var query = [{\n            \"id\": null,\n            \"name\": null,\n            \"s:name\": {\n              \"value\": null,\n              \"lang\": \"/lang/en\",\n              \"optional\": \"required\"\n            },\n            \"/freebase/type_hints/included_types\": [{\n              \"id\": obj.id\n            }]\n          }]\n          freebase.mqlread(query, {}, function(r) {\n            if (!r || !r.result) {\n              return callback(obj)\n            }\n            obj.included_by = r.result.map(function(v) {\n              return {\n                id: v.id,\n                name: v.name\n              }\n            })\n            return callback(obj)\n          })\n        })\n\n      } else {\n        freebase.property_lookup(q, {}, function(r) {\n          if (!r || !r[0] || !r[0].id) {\n            return callback({})\n          }\n          return freebase.property_inspection(r[0].id, {}, callback)\n        })\n      }\n    })\n  }\n  //freebase.schema(\"politician\")\n  //freebase.schema(\"/type/property/master_property\")\n\n\n  freebase.property_introspection = function(q, options, callback) {\n    this.doc = \"common lookups for freebase property data\"\n    callback = callback || console.log;\n    if (!q) {\n      return callback({})\n    }\n    if (typeof options == \"function\") {\n      callback = options;\n      options = {};\n    } //flexible parameter\n    options = options || {};\n    //handle an array\n    if (_.isArray(q) && q.length > 1) {\n      return fns.doit_async(q, freebase.property_introspection, options, callback)\n    }\n    var query = [{\n      \"id\": q,\n      \"mid\": null,\n      \"name\": null,\n      \"type\": \"/type/property\",\n      \"reverse_property\": [{\n        \"id\": null,\n        \"name\": null,\n        \"optional\": true\n      }],\n      \"expected_type\": [{\n        \"id\": null,\n        \"name\": null,\n        \"optional\": true,\n        \"/freebase/type_hints/mediator\": null\n      }],\n      \"unique\": null,\n      \"schema\": {\n        \"id\": null,\n        \"name\": null,\n        \"/freebase/type_profile/instance_count\": null,\n        \"/freebase/type_hints/mediator\": null\n      },\n      \"/common/topic/description\": null\n    }]\n    freebase.mqlread(query, options, function(r) {\n      var obj = {}\n      if (!r || !r.result || !r.result[0]) {\n        return callback(obj)\n      }\n      r = r.result[0]\n      obj.name = r.name\n      obj.id = r.id\n      obj.type = r.schema\n      obj.description = r[\"/common/topic/description\"]\n      obj.unique = r.unique || false;\n      obj.reverse_property = r.reverse_property\n      obj.expected_type = r.expected_type\n\n      //get its metaschema\n      var query = [{\n        \"name\": null,\n        \"type\": \"/base/fbontology/semantic_predicate\",\n        \"paths\": {\n          \"a:properties\": q,\n          \"b:properties\": [{\n            \"id\": null\n          }]\n        }\n      }]\n      freebase.mqlread(query, options, function(r) {\n        obj.meta = r.result\n        return callback(obj)\n      })\n    })\n    //   //get its property aliases\n    // var query=[{type:\"/base/natlang/property_alias\",\n    //   property:property,\n    //   alias:[]\n    //   }]\n  }\n  //freebase.property_introspection(\"/government/politician/party\")\n\n\n  //\n  freebase.drilldown = function(q, options, callback) {\n    this.doc = \"get insight into the breakdown of the topics in this type, by type and quality\"\n    var ps = fns.settle_params(arguments, freebase.drilldown, {\n      limit: 1000\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback([]);\n    }\n    //singularize it if its not an id\n    if (!ps.q.match(/\\/.{1,12}\\/.{3}/)) {\n      ps.q = fns.singularize(ps.q);\n    }\n    //get its id\n    freebase.get_id(ps.q, {\n      type: \"/type/type\"\n    }, function(topic) {\n      if (!topic || !topic.id) {\n        return ps.callback([])\n      }\n      var query = [{\n        \"s:type\": topic.id,\n        \"type\": [],\n        \"name\": null,\n        \"id\": null,\n        \"limit\": 150,\n        \"estimate-count\": null,\n        \"/common/topic/image\": [{\n          \"id\": null,\n          \"limit\": 1,\n          \"optional\": true\n        }],\n        \"key\": [{\n          \"namespace\": \"/wikipedia/en\",\n          \"limit\": 1,\n          \"value\": null,\n          \"optional\": true\n        }],\n        \"/common/topic/alias\": [{\n          \"value\": null,\n          \"limit\": 1,\n          \"optional\": true\n        }]\n      }]\n      if (options.extend) {\n        for (var i in options.extend) {\n          query[0][i] = options.extend[i]\n        }\n      }\n      freebase.paginate(query, ps.options, function(result) {\n        var types = _.flatten(result.map(function(v) {\n          return v.type\n        }));\n        types = types.filter(function(v) {\n          return !v.match(/\\/topic$/)\n        })\n        var topk = fns.topk(types, result.length);\n        var aliases = result.filter(function(r) {\n          return r[\"/common/topic/alias\"].length > 0\n        })\n        var images = result.filter(function(r) {\n          return r[\"/common/topic/image\"].length > 0\n        })\n        var wikipedia = result.filter(function(r) {\n          return r[\"key\"].length > 0\n        })\n        var obj = {\n          types: topk,\n          alias_percent: fns.percentage(aliases.length, result.length),\n          image_percent: fns.percentage(images.length, result.length),\n          wikipedia_percent: fns.percentage(wikipedia.length, result.length),\n          subset: result.length,\n          \"estimate-count\": result[0][\"estimate-count\"]\n        }\n        ps.callback(obj)\n      })\n    })\n  }\n  // freebase.drilldown(\"/chemistry/chemical_compound\",{max:10000},console.log)\n\n\n  freebase.mql_encode = function(s) {\n    this.doc = \"quote a unicode string to turn it into a valid mql /type/key/value\"\n    if (!s) {\n      return ''\n    }\n    s = s.replace(/  /, ' ');\n    s = s.replace(/^\\s+|\\s+$/, '');\n    s = s.replace(/ /g, '_');\n    var mqlkey_start = 'A-Za-z0-9';\n    var mqlkey_char = 'A-Za-z0-9_-';\n    var MQLKEY_VALID = new RegExp('^[' + mqlkey_start + '][' + mqlkey_char + ']*$');\n    var MQLKEY_CHAR_MUSTQUOTE = new RegExp('([^' + mqlkey_char + '])', 'g');\n    if (MQLKEY_VALID.exec(s)) // fastpath\n    return s;\n    var convert = function(a, b) {\n      var hex = b.charCodeAt(0).toString(16).toUpperCase();\n      if (hex.length == 2) hex = '00' + hex;\n      if (hex.length == 3) hex = '0' + hex;\n      return '$' + hex;\n    };\n    var x = s.replace(MQLKEY_CHAR_MUSTQUOTE, convert);\n    if (x.charAt(0) == '-' || x.charAt(0) == '_') {\n      x = convert(x, x.charAt(0)) + x.substr(1);\n    }\n    return x;\n  }\n\n\n  freebase.category_list = function(q, options, callback) {\n    this.doc = \"get the freebase topics in a wikipedia category\"\n    var ps = fns.settle_params(arguments, freebase.category_list, {\n      depth: 1\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its not a wikipedia category\n    if (!ps.q.match(/Category:/)) {\n      ps.q = 'Category:' + ps.q\n    }\n    var all_topics = [];\n    var all_categories = [];\n    iterate(ps.q, '')\n\n    function iterate(cat, cmcontinue) {\n      var url = globals.wikipedia_host + \"?action=query&list=categorymembers&format=json&cmlimit=400&cmtitle=\" + encodeURIComponent(cat) + \"&cmcontinue=\" + cmcontinue;\n      fns.http(url, ps.options, function(r) {\n        if (!r || !r.query || !r.query.categorymembers || !r.query.categorymembers[Object.keys(r.query.categorymembers)[0]]) {\n          return ps.callback([])\n        }\n        all_categories = all_categories.concat(r.query.categorymembers.filter(function(v) {\n          return v.ns == 14\n        }));\n        var cmcontinue = r[\"query-continue\"] || {}\n        cmcontinue = cmcontinue.categorymembers || {}\n        cmcontinue = cmcontinue.cmcontinue || '';\n        var topics = r.query.categorymembers.filter(function(v) {\n          return v.ns == 0\n        });\n        topics = topics.map(function(v) {\n          return {\n            id: \"/wikipedia/en/\" + freebase.mql_encode(v.title),\n            article: 'http://en.wikipedia.org/wiki/index.html?curid=' + v.pageid,\n            title: v.title\n          }\n        })\n        all_topics = all_topics.concat(topics);\n        if (!cmcontinue) {\n          return ps.callback(all_topics)\n        } else {\n          iterate(cat, cmcontinue); //recurse\n        }\n      })\n    }\n  }\n  // freebase.category_list(\"Category:Redirects_from_plurals\")\n\n\n\n  freebase.wikipedia_subcategories = function(q, options, callback) {\n    this.doc = \"find the subcategories of this wikipedia category\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia_subcategories, {\n      depth: 1,\n      already: []\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    //if its not a wikipedia category\n    if (!ps.q.match(/Category:/)) {\n      ps.q = 'Category:' + ps.q\n    }\n    var url = globals.wikipedia_host + \"?action=query&list=categorymembers&format=json&cmlimit=400&cmnamespace=14&cmtitle=\" + encodeURIComponent(ps.q);\n    fns.http(url, ps.options, function(r) {\n      if (!r || !r.query || !r.query.categorymembers || !r.query.categorymembers[Object.keys(r.query.categorymembers)[0]]) {\n        return ps.callback([]);\n      }\n      var cats = r.query.categorymembers.map(function(v) {\n        return v.title\n      });\n      //remove if done already (for recursive cats)\n      cats = cats.filter(function(v) {\n        return !fns.isin(v, ps.options.already)\n      })\n      ps.options.already = fns.compact_strong(_.flatten(ps.options.already.concat(cats)));\n      if (ps.options.depth > 1 && cats.length > 0) {\n        ps.options.depth = ps.options.depth - 1;\n        return freebase.wikipedia_subcategories(cats, ps.options, function(r) {\n          ps.options.already = ps.options.already.concat(r)\n          return ps.callback(fns.compact_strong(_.flatten(ps.options.already)));\n        })\n      } else {\n        return ps.callback(ps.options.already)\n      }\n    })\n  }\n  //freebase.wikipedia_subcategories(\"Category:Enzymes\",{depth:20},function(r){console.log(JSON.stringify(r))})\n  //freebase.wikipedia_subcategories([\"Category:Toronto\",\"Category:Vancouver\"])\n\n\n  freebase.rdf = function(q, options, callback) {\n    this.doc = \"RDF api\"\n    this.reference = \"http://wiki.freebase.com/wiki/RDF\"\n    var ps = fns.settle_params(arguments, freebase.topic, {});\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    freebase.get_id(ps.q, ps.options, function(topic) {\n      var id = topic.id;\n      if (!id) {\n        return ps.callback({})\n      }\n      ps.options.filter = ps.options.filter || 'all'\n      var url = globals.host + \"rdf\" + id;\n      fns.http(url, ps.options, function(result) {\n        return ps.callback(result.body || '')\n      })\n    })\n  }\n  //freebase.rdf(\"toronto\")\n\n  freebase.wikipedia_to_freebase = function(q, options, callback) {\n    this.doc = \"turn a wikipedia title or url into a freebase topic\"\n    var ps = fns.settle_params(arguments, freebase.wikipedia_to_freebase, {\n      depth: 1\n    });\n    if (ps.array) {\n      return fns.doit_async(ps);\n    }\n    if (!ps.valid) {\n      return ps.callback({});\n    }\n    ps.q = ps.q.replace(/^https?:\\/\\/..\\.wikipedia\\.org\\/wiki\\//, '');\n    var title = ps.q;\n    var obj = {\n      id: \"/wikipedia/en/\" + freebase.mql_encode(ps.q),\n      title: title\n    }\n    return ps.callback(obj)\n  }\n  // freebase.wikipedia_to_freebase(\"Tony Hawk\")\n\n\n\n  freebase.add_widget = function(obj) {\n    this.doc = \"add a generic html view of a topic\"\n    if (!obj || !id) {\n      return obj\n    }\n    var id = obj.mid || obj.id;\n    var html = '<a href=\"#\" class=\"imagewrap\" data-id=\"' + id + '\" style=\"position:relative; width:200px; height:200px;\">' + '<img style=\"border-radius:5px;\" src=\"' + globals.image_host + id + '?maxwidth=200&maxheight=200&errorid=/m/0djw4wd\"/>'\n    if (obj.name) {\n      html += '<div class=\"caption\" style=\"position:absolute; opacity:0.5; background:black; bottom:10px; color:white; left:10px; border-radius: 5px; min-width:100px; padding:5px;\">' + obj.name + '</div>'\n    }\n    html += '</a>'\n    obj.widget = html;\n    return obj;\n  }\n\n\n  //soften up the api so it will take these methods alternatively..\n\n  // for(var i in aliases){\n  //   aliases[i].map(function(v){\n  //     freebase[v]=freebase[i]\n  //     freebase[v].is_alias=true\n  //   })\n  // }\n\n  //\n  freebase.documentation = function(f, options, callback) {\n    callback = callback || console.log;\n    options = options || {};\n    var str = [];\n    str.push('Freebase.com nodejs-library')\n    str.push('https://github.com/spencermountain/Freebase-nodejs--');\n    if (f) {\n      if (freebase[f]) {\n        str.push(\" * \" + f)\n        var f = new freebase[f]()\n        str.push(f.doc)\n        return\n      } else {\n        str.push(\"Couldn't find the function \" + f + \". Here are the available functions:\")\n      }\n    }\n    Object.keys(freebase).map(function(f) {\n      str.push(\"* **\" + f + '** ')\n      var f = new freebase[f](null, {}, function() {})\n      str.push('     -' + f.doc)\n    })\n    if (options.html) {\n      str = str.join('<br/>')\n    } else {\n      str = str.join('\\n')\n    }\n    callback(str)\n  }\n  //freebase.documentation()\n\n  var aliases = {\n    mqlread: [\"query\", \"mql_read\"],\n    topic: [\"topic_api\", \"all_data\", \"data\", \"everything\", \"get_data\"],\n    paginate: [\"continue\", \"all\", \"each\"],\n    same_as_links: [\"sameas\", \"sameAs\", \"sameaslinks\", \"links\", \"sameas_links\", \"external_links\", \"weblinks\"],\n    translate: [\"translate_to\", \"multilingual\", \"i8n\", \"get_translation\"],\n    image: [\"pic\", \"photo\", \"picture\", \"get_image\", \"image_url\", \"image_src\"],\n    description: [\"get_description\", \"blurb\", \"get_blurb\", \"blurb_api\", \"text\", \"get_text\"],\n    notable: [\"notable_type\", \"notabletype\", \"notable_for\", \"notable_as\", \"main_type\", \"type\"],\n    place_data: [\"city\", \"country\", \"province\", \"place_info\", \"location_info\", \"location\", \"whereis\"],\n    incoming: [\"incoming_links\", \"incoming_nodes\", \"inlinks\"],\n    outgoing: [\"outgoing_links\", \"outgoing_nodes\", \"outlinks\"],\n    related: [\"related_topics\", \"similar\", \"related_to\", \"get_related\"],\n    gallery: [\"images\", \"get_images\"],\n    geolocation: [\"geo\", \"geocoordinates\", \"geo_location\", \"lat_lng\", \"location\"],\n    nearby: [\"near\", \"close_to\"],\n    inside: [\"inside_of\", \"within\", \"contained_by\", \"contains\"],\n    mql_encode: [\"encode\", \"escape\"]\n  }\n\n\n\n  // export for AMD / RequireJS\n  if (typeof define !== 'undefined' && define.amd) {\n    define([], function() {\n      return freebase;\n    });\n  }\n  // export for Node.js\n  else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = freebase;\n  }\n"]],"start1":0,"start2":0,"length1":0,"length2":65506}]],"length":65506}
{"contributors":[],"silentsave":false,"ts":1368005458577,"patch":[[{"diffs":[[0,"ts) {\n  "],[1,"//"],[0,"var _ = "]],"start1":208,"start2":208,"length1":16,"length2":18},{"diffs":[[0,"equire('"],[1,"./client_side/"],[0,"async');"]],"start1":264,"start2":264,"length1":16,"length2":30},{"diffs":[[0,"/helpers"],[-1,"/helper"],[1,".j"],[0,"s');\n  v"]],"start1":317,"start2":317,"length1":23,"length2":18},{"diffs":[[0,"('./"],[-1,"helpers/"],[0,"data"]],"start1":352,"start2":352,"length1":16,"length2":8},{"diffs":[[0,"{3}/) !="],[1,"="],[0," null)) "]],"start1":7154,"start2":7154,"length1":16,"length2":17},{"diffs":[[0,"ray\n    if ("],[-1,"_.isArray(q"],[1,"q.hasOwnProperty(q.length"],[0,") && q.lengt"]],"start1":52140,"start2":52140,"length1":35,"length2":49},{"diffs":[[0,"      }\n      }\n"],[-1,"  "],[1,"/*\n"],[0,"    freebase.pag"]],"start1":55240,"start2":55240,"length1":34,"length2":35},{"diffs":[[0,"  })\n    })\n  }\n"],[1,"  */\n  \n"],[0,"  // freebase.dr"]],"start1":56273,"start2":56273,"length1":32,"length2":40},{"diffs":[[0,"},console.log)\n\n"],[-1,"\n"],[0,"  freebase.mql_e"]],"start1":56362,"start2":56362,"length1":33,"length2":32},{"diffs":[[0,"pact_strong("],[-1,"_.flatten"],[0,"(ps.options."]],"start1":60310,"start2":60310,"length1":33,"length2":24},{"diffs":[[0,"y.concat(r)\n"],[1,""],[0,"          re"]],"start1":60588,"start2":60588,"length1":24,"length2":24},{"diffs":[[0,"_strong("],[-1,"_.flatten"],[0,"(ps.opti"]],"start1":60640,"start2":60640,"length1":25,"length2":16}]],"length":65514,"saved":false}
{"ts":1368006049416,"patch":[[{"diffs":[[0,"eebase;\n  }\n"],[1,"\nmodule.exports = freebase;\n"]],"start1":65502,"start2":65502,"length1":12,"length2":40}]],"length":65542,"saved":false}
{"ts":1368007066828,"patch":[[{"diffs":[[0,"ata;\n}\n\n"],[-1,"  var"],[1,"function"],[0," freebas"]],"start1":367,"start2":367,"length1":21,"length2":24},{"diffs":[[0,"freebase"],[-1," = {};"],[1,"()\n{"],[0,"\n\n  var "]],"start1":384,"start2":384,"length1":22,"length2":20},{"diffs":[[0,"\n  f"],[-1,"reebase.mqlread = function"],[1,"unction mqlread "],[0,"(que"]],"start1":759,"start2":759,"length1":34,"length2":24},{"diffs":[[0,"\n\n  "],[-1,"freebase.lookup_id = function"],[1," function lookup_id "],[0,"(q, "]],"start1":1407,"start2":1407,"length1":37,"length2":28},{"diffs":[[0,"\n  f"],[-1,"reebase.search = function"],[1,"unction search "],[0,"(q, "]],"start1":1984,"start2":1984,"length1":33,"length2":23},{"diffs":[[0," url\n  f"],[-1,"reebase."],[1,"unction "],[0,"url_look"]],"start1":3444,"start2":3444,"length1":24,"length2":24},{"diffs":[[0," url_lookup "],[-1,"= function"],[0,"(q, options,"]],"start1":3459,"start2":3459,"length1":34,"length2":24},{"diffs":[[0,"\n  f"],[-1,"reebase.lookup = function"],[1,"unction lookup "],[0,"(q, "]],"start1":4334,"start2":4334,"length1":33,"length2":23},{"diffs":[[0,"\n  f"],[-1,"reebase.get_id = function"],[1,"unction get_id "],[0,"(q, "]],"start1":6656,"start2":6656,"length1":33,"length2":23},{"diffs":[[0,"\n  f"],[-1,"reebase.topic = f"],[0,"unction"],[1," topic "],[0,"(q, "]],"start1":7625,"start2":7625,"length1":32,"length2":22},{"diffs":[[0,")\n\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"paginate"]],"start1":8367,"start2":8367,"length1":24,"length2":24},{"diffs":[[0,"aginate "],[-1,"= function"],[0,"(query, "]],"start1":8384,"start2":8384,"length1":26,"length2":16},{"diffs":[[0,"0})\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"descript"]],"start1":9366,"start2":9366,"length1":24,"length2":24},{"diffs":[[0,"description "],[-1,"= function"],[0,"(q, options,"]],"start1":9382,"start2":9382,"length1":34,"length2":24},{"diffs":[[0,"\n  f"],[-1,"reebase.image = f"],[0,"unction"],[1," image "],[0,"(q, "]],"start1":10081,"start2":10081,"length1":32,"length2":22},{"diffs":[[0,"\n  f"],[-1,"reebase.grammar = function"],[1,"unction grammar "],[0,"(q, "]],"start1":11255,"start2":11255,"length1":34,"length2":24},{"diffs":[[0,"s\")\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"same_as_"]],"start1":13603,"start2":13603,"length1":24,"length2":24},{"diffs":[[0,"ame_as_links"],[-1," = function"],[0,"(q, options,"]],"start1":13620,"start2":13620,"length1":35,"length2":24},{"diffs":[[0,"})\n  }\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"translate = "]],"start1":15238,"start2":15238,"length1":32,"length2":32},{"diffs":[[0,"anslate "],[-1,"= function"],[0,"(q, opti"]],"start1":15260,"start2":15260,"length1":26,"length2":16},{"diffs":[[0,"\n  f"],[-1,"reebase.notable = function"],[1,"unction notable"],[0,"(q, "]],"start1":16293,"start2":16293,"length1":34,"length2":23},{"diffs":[[0,"  }\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"sentence"]],"start1":16998,"start2":16998,"length1":24,"length2":24},{"diffs":[[0,"entence "],[-1,"= function"],[0,"(q, opti"]],"start1":17015,"start2":17015,"length1":26,"length2":16},{"diffs":[[0,"}\n\n    f"],[-1,"reebase."],[1,"unction "],[0,"descript"]],"start1":17352,"start2":17352,"length1":24,"length2":24},{"diffs":[[0,")\n\n "],[-1," freebase.list ="],[0," fun"]],"start1":17753,"start2":17753,"length1":24,"length2":8},{"diffs":[[0,"log)\n\n  function"],[1," list "],[0,"(q, options, cal"]],"start1":17750,"start2":17750,"length1":32,"length2":38},{"diffs":[[0,"})\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"place_da"]],"start1":18740,"start2":18740,"length1":24,"length2":24},{"diffs":[[0,"ace_data"],[-1," = function"],[0,"(geo, op"]],"start1":18758,"start2":18758,"length1":27,"length2":16},{"diffs":[[0,"   }]\n      "],[-1,"freebase."],[1,"\n      "],[0,"mqlread(quer"]],"start1":20558,"start2":20558,"length1":33,"length2":31},{"diffs":[[0,"\n  f"],[-1,"reebase.incoming = function"],[1,"unction incoming"],[0,"(q, "]],"start1":22453,"start2":22453,"length1":35,"length2":24},{"diffs":[[0,"\n    }\n\n    "],[-1,"freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":22746,"start2":22746,"length1":33,"length2":24},{"diffs":[[0,"nate.\n      "],[-1,"freebase."],[0,""],[1,""],[0,"paginate(que"]],"start1":23143,"start2":23143,"length1":33,"length2":24},{"diffs":[[0,"\n  f"],[-1,"reebase.outgoing = function"],[1,"unction outgoing"],[0,"(q, "]],"start1":23412,"start2":23412,"length1":35,"length2":24},{"diffs":[[0,")\n\n "],[-1," freebase.graph ="],[0," fun"]],"start1":25988,"start2":25988,"length1":25,"length2":8},{"diffs":[[0,"er\")\n\n  function"],[1," graph"],[0,"(q, options, cal"]],"start1":25985,"start2":25985,"length1":32,"length2":38},{"diffs":[[0,"ase."],[1," "],[0,"related"],[-1," = function"],[0,"(q, "]],"start1":28304,"start2":28304,"length1":26,"length2":16},{"diffs":[[0," (!r || "],[-1,"_.isEmpty(r)"],[1,"r==null"],[0,") {\n    "]],"start1":29488,"start2":29488,"length1":28,"length2":23},{"diffs":[[0,"));\n"],[1,"    "],[0,"})*/\n\n "],[-1," freebase.is_a ="],[0," fun"]],"start1":30116,"start2":30116,"length1":31,"length2":19},{"diffs":[[0,"})*/\n\n  function"],[1," is_a"],[0,"(q, options, cal"]],"start1":30124,"start2":30124,"length1":32,"length2":37},{"diffs":[[0,"ronto\")\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"property_loo"]],"start1":31094,"start2":31094,"length1":32,"length2":32},{"diffs":[[0,"_lookup "],[-1,"= function"],[0,"(q, opti"]],"start1":31122,"start2":31122,"length1":26,"length2":16},{"diffs":[[0,"\n  f"],[-1,"reebase.question = func"],[1,"unction ques"],[0,"tion"]],"start1":32037,"start2":32037,"length1":31,"length2":20},{"diffs":[[0,"\n\n\n "],[-1," freebase.dig ="],[0," fun"]],"start1":34022,"start2":34022,"length1":23,"length2":8},{"diffs":[[0,"***\n\n\n  function"],[1," dig"],[0,"(q, options, cal"]],"start1":34019,"start2":34019,"length1":32,"length2":36},{"diffs":[[0,"\n  f"],[-1,"reebase.gallery = function"],[1,"unction gallery"],[0,"(q, "]],"start1":35597,"start2":35597,"length1":34,"length2":23},{"diffs":[[0,"\n  f"],[-1,"reebase.wordnet = function"],[1,"unction wordnet "],[0,"(q, "]],"start1":36481,"start2":36481,"length1":34,"length2":24},{"diffs":[[0,"\n  f"],[-1,"reebase.transitive = f"],[0,""],[1,""],[0,"unct"]],"start1":37549,"start2":37549,"length1":30,"length2":8},{"diffs":[[0,"\n  f"],[-1,"reebase.geolocation = func"],[1,"unction geoloca"],[0,"tion"]],"start1":38377,"start2":38377,"length1":34,"length2":23},{"diffs":[[0,"\n  f"],[-1,"reebase.nearby = f"],[0,"unction"],[1," nearby"],[0,"(q, "]],"start1":39502,"start2":39502,"length1":33,"length2":22},{"diffs":[[0,"\n  f"],[-1,"reebase.inside = f"],[0,"unction"],[1," inside"],[0,"(q, "]],"start1":40590,"start2":40590,"length1":33,"length2":22},{"diffs":[[0,"******\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"wikipedia_pa"]],"start1":41376,"start2":41376,"length1":32,"length2":32},{"diffs":[[0,"kipedia_page"],[-1," = function"],[0,"(q, options,"]],"start1":41398,"start2":41398,"length1":35,"length2":24},{"diffs":[[0,"o')\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"dbpedia_"]],"start1":42308,"start2":42308,"length1":24,"length2":24},{"diffs":[[0,"dia_page"],[-1," = function"],[0,"(q, opti"]],"start1":42328,"start2":42328,"length1":27,"length2":16},{"diffs":[[0,"ronto')\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"wikipedia_ca"]],"start1":43352,"start2":43352,"length1":32,"length2":32},{"diffs":[[0,"a_categories"],[-1," = function"],[0,"(q, options,"]],"start1":43380,"start2":43380,"length1":35,"length2":24},{"diffs":[[0,")//****\n\n  f"],[-1,"reebase."],[1,"unction  "],[0,"wikipedia_li"]],"start1":44645,"start2":44645,"length1":32,"length2":33},{"diffs":[[0,"ipedia_links"],[-1," = function"],[0,"(q, options,"]],"start1":44669,"start2":44669,"length1":35,"length2":24},{"diffs":[[0,"le.log)\n\n  f"],[-1,"reebase."],[1,"unction  "],[0,"wikipedia_ex"]],"start1":46296,"start2":46296,"length1":32,"length2":33},{"diffs":[[0,"al_links"],[-1," = function"],[0,"(q, opti"]],"start1":46333,"start2":46333,"length1":27,"length2":16},{"diffs":[[0,"\n  f"],[-1,"reebase.schema = f"],[0,"unction"],[1," schema"],[0,"(q, "]],"start1":47895,"start2":47895,"length1":33,"length2":22},{"diffs":[[0,"\")\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"property"]],"start1":51343,"start2":51343,"length1":24,"length2":24},{"diffs":[[0,"spection"],[-1," = function"],[0,"(q, opti"]],"start1":51373,"start2":51373,"length1":27,"length2":16},{"diffs":[[0,"\n  f"],[-1,"reebase.drilldown = functio"],[1,"unction drilldow"],[0,"n(q,"]],"start1":53497,"start2":53497,"length1":35,"length2":24},{"diffs":[[0,"og)\n\n  f"],[-1,"reebase."],[1,"unction  "],[0,"mql_enco"]],"start1":55933,"start2":55933,"length1":24,"length2":25},{"diffs":[[0,"l_encode"],[-1," = function"],[0,"(s) {\n  "]],"start1":55952,"start2":55952,"length1":27,"length2":16},{"diffs":[[0," }\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"category"]],"start1":56865,"start2":56865,"length1":24,"length2":24},{"diffs":[[0,"ory_list"],[-1," = function"],[0,"(q, opti"]],"start1":56886,"start2":56886,"length1":27,"length2":16},{"diffs":[[0,"als\")\n\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"wikipedia_su"]],"start1":58720,"start2":58720,"length1":32,"length2":32},{"diffs":[[0,"tegories"],[-1," = function"],[0,"(q, opti"]],"start1":58755,"start2":58755,"length1":27,"length2":16},{"diffs":[[0,"\n\n\n "],[-1," freebase.rdf ="],[0," fun"]],"start1":60483,"start2":60483,"length1":23,"length2":8},{"diffs":[[0,"\"])\n\n\n  function"],[1," rdf"],[0,"(q, options, cal"]],"start1":60480,"start2":60480,"length1":32,"length2":36},{"diffs":[[0,"o\")\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"wikipedi"]],"start1":61160,"start2":61160,"length1":24,"length2":24},{"diffs":[[0,"freebase"],[-1," = function"],[0,"(q, opti"]],"start1":61189,"start2":61189,"length1":27,"length2":16},{"diffs":[[0,")\n\n\n\n  f"],[-1,"reebase."],[1,"unction "],[0,"add_widg"]],"start1":61775,"start2":61775,"length1":24,"length2":24},{"diffs":[[0,"d_widget"],[-1," = function"],[0,"(obj) {\n"]],"start1":61793,"start2":61793,"length1":27,"length2":16},{"diffs":[[0,"  //\n  f"],[-1,"reebase."],[1,"unction "],[0,"document"]],"start1":62697,"start2":62697,"length1":24,"length2":24},{"diffs":[[0,"entation"],[-1," = function"],[0,"(f, opti"]],"start1":62718,"start2":62718,"length1":27,"length2":16},{"diffs":[[0,"\"]\n  }\n\n"],[-1,"\n\n"],[0,"  // exp"]],"start1":64719,"start2":64719,"length1":18,"length2":16},{"diffs":[[0,"});\n  }\n"],[-1,"  "],[1,"\n};\n\n"],[0,"// expor"]],"start1":64867,"start2":64867,"length1":18,"length2":21},{"diffs":[[0,"Node.js\n"],[-1,"  "],[0,"else if "]],"start1":64894,"start2":64894,"length1":18,"length2":16},{"diffs":[[0,"orts) {\n"],[-1,"    "],[0,"module.e"]],"start1":64954,"start2":64954,"length1":20,"length2":16},{"diffs":[[0,"se;\n"],[-1,"  "],[0,"}\n\n"],[-1,"module.exports = freebase;\n"]],"start1":64985,"start2":64985,"length1":36,"length2":7}]],"length":64992,"saved":false}
{"contributors":[],"silentsave":false,"ts":1368022269827,"patch":[[{"diffs":[[1,"function fb_scope()\n{\n"],[0,"//By Spe"]],"start1":0,"start2":0,"length1":8,"length2":30},{"diffs":[[0,"reebase;\n}\n\n"],[1,"}\n"]],"start1":65002,"start2":65002,"length1":12,"length2":14}]],"length":65016,"saved":false}
{"ts":1368022297295,"patch":[[{"diffs":[[1,"("],[0,"function fb_scop"]],"start1":0,"start2":0,"length1":16,"length2":17},{"diffs":[[0,"se;\n}\n\n}"],[1,"();\n"],[0,"\n"]],"start1":65008,"start2":65008,"length1":9,"length2":13}]],"length":65021,"saved":false}
{"ts":1368022558921,"patch":[[{"diffs":[[0,"}\n\n    f"],[-1,"unction "],[1,"ns."],[0,"descript"]],"start1":17375,"start2":17375,"length1":24,"length2":19}]],"length":65016,"saved":false}
{"ts":1368022603046,"patch":[[{"diffs":[[-1,"(function fb_scope()\n{\n"],[0,"//By"]],"start1":0,"start2":0,"length1":27,"length2":4},{"diffs":[[0,"n\")\n\n  f"],[-1,"reebase."],[1,"unction"],[0," related"]],"start1":28287,"start2":28287,"length1":24,"length2":23},{"diffs":[[0,"se;\n"],[-1,"}\n\n}();\n\n"]],"start1":64979,"start2":64979,"length1":13,"length2":4}]],"length":64983,"saved":false}
{"ts":1368022755334,"patch":[[{"diffs":[[0,"ze(ps.q);\n    }\n"],[1,"    \n"],[0,"    //get its id"]],"start1":53945,"start2":53945,"length1":32,"length2":37},{"diffs":[[0,"its id\n    f"],[-1,"reebase."],[1,"unction "],[0,"get_id(ps.q,"]],"start1":53976,"start2":53976,"length1":32,"length2":32},{"diffs":[[0,"pe: \"/type/type\""],[1,"}"],[0,"\n    "],[-1,"}"],[1,"  "],[0,", function(topic"]],"start1":54019,"start2":54019,"length1":38,"length2":40},{"diffs":[[0,"(topic) {\n      "],[1," "],[1,"   "],[0,"if (!topic || !t"]],"start1":54053,"start2":54053,"length1":32,"length2":36},{"diffs":[[0,"c.id) {\n        "],[1,"  "],[1,"  "],[0,"return ps.callba"]],"start1":54092,"start2":54092,"length1":32,"length2":36},{"diffs":[[0,"lback([])\n      "],[-1,"}\n"],[1,"    }\n    "],[0,"      var query "]],"start1":54125,"start2":54125,"length1":34,"length2":42},{"diffs":[[0,"        "],[1,"    "],[0,"\"s:type\""]],"start1":54172,"start2":54172,"length1":16,"length2":20},{"diffs":[[0,"pic.id,\n        "],[1,"    "],[0,"\"type\": [],\n    "]],"start1":54196,"start2":54196,"length1":32,"length2":36},{"diffs":[[0,"e\": [],\n        "],[1,"  "],[1,"  "],[0,"\"name\": null,\n  "]],"start1":54220,"start2":54220,"length1":32,"length2":36},{"diffs":[[0,": null,\n        "],[1,"    "],[0,"\"id\": null,\n    "]],"start1":54246,"start2":54246,"length1":32,"length2":36},{"diffs":[[0,"    \"id\": null,\n"],[1,"    "],[0,"        \"limit\":"]],"start1":54262,"start2":54262,"length1":32,"length2":36},{"diffs":[[0,"\": 150,\n        "],[1,"    "],[0,"\"estimate-count\""]],"start1":54296,"start2":54296,"length1":32,"length2":36},{"diffs":[[0,"e-count\": null,\n"],[1,"    "],[0,"        \"/common"]],"start1":54324,"start2":54324,"length1":32,"length2":36},{"diffs":[[0,"\": [{\n          "],[1,"  "],[1,"  "],[0,"\"id\": null,\n    "]],"start1":54372,"start2":54372,"length1":32,"length2":36},{"diffs":[[0,"    \"id\": null,\n"],[1,"    "],[0,"          \"limit"]],"start1":54388,"start2":54388,"length1":32,"length2":36},{"diffs":[[0,"    \"limit\": 1,\n"],[1,"    "],[0,"          \"optio"]],"start1":54414,"start2":54414,"length1":32,"length2":36},{"diffs":[[0,"\": true\n        "],[-1,"}],\n"],[1,"    }],\n    "],[0,"        \"key\": ["]],"start1":54453,"start2":54453,"length1":36,"length2":44},{"diffs":[[0,"\": [{\n          "],[1,"  "],[1,"  "],[0,"\"namespace\": \"/w"]],"start1":54493,"start2":54493,"length1":32,"length2":36},{"diffs":[[0,"/en\",\n          "],[1,"    "],[0,"\"limit\": 1,\n    "]],"start1":54537,"start2":54537,"length1":32,"length2":36},{"diffs":[[0,"    \"limit\": 1,\n"],[1,"    "],[0,"          \"value"]],"start1":54553,"start2":54553,"length1":32,"length2":36},{"diffs":[[0,"null,\n          "],[1,"    "],[0,"\"optional\": true"]],"start1":54592,"start2":54592,"length1":32,"length2":36},{"diffs":[[0,"\": true\n        "],[1,"    "],[0,"}],\n        \"/co"]],"start1":54621,"start2":54621,"length1":32,"length2":36},{"diffs":[[0,"    }],\n        "],[1,"  "],[1,"  "],[0,"\"/common/topic/a"]],"start1":54637,"start2":54637,"length1":32,"length2":36},{"diffs":[[0,"\": [{\n          "],[1,"    "],[0,"\"value\": null,\n "]],"start1":54677,"start2":54677,"length1":32,"length2":36},{"diffs":[[0," \"value\": null,\n"],[1,"    "],[0,"          \"limit"]],"start1":54696,"start2":54696,"length1":32,"length2":36},{"diffs":[[0,"\": 1,\n          "],[1,"    "],[0,"\"optional\": true"]],"start1":54732,"start2":54732,"length1":32,"length2":36},{"diffs":[[0,"\": true\n        "],[1,"    "],[0,"}]\n      }]\n    "]],"start1":54761,"start2":54761,"length1":32,"length2":36},{"diffs":[[0,"   }]\n      "],[1,"  "],[1,"  "],[0,"}]\n"],[1,"    "],[0,"      if (op"]],"start1":54778,"start2":54778,"length1":27,"length2":35},{"diffs":[[0,"tions.extend) {\n"],[1,"    "],[0,"        for (var"]],"start1":54813,"start2":54813,"length1":32,"length2":36},{"diffs":[[0,"nd) {\n          "],[1,"    "],[0,"query[0][i] = op"]],"start1":54867,"start2":54867,"length1":32,"length2":36},{"diffs":[[0,"tions.extend[i]\n"],[1,"            }\n  "],[0,"        }\n      "]],"start1":54903,"start2":54903,"length1":32,"length2":48}]],"length":65126,"saved":false}
{"ts":1368022819568,"patch":[[{"diffs":[[0,"id\n    f"],[-1,"unction "],[1,"ns."],[0,"get_id(p"]],"start1":53980,"start2":53980,"length1":24,"length2":19},{"diffs":[[0,"}\n      "],[-1,"}"],[1,"  });"],[0,"\n/*\n    "]],"start1":54938,"start2":54938,"length1":17,"length2":21}]],"length":65125,"saved":false}
{"ts":1368022958035,"patch":[[{"diffs":[[0,"fine.amd) {\n"],[1,"    "],[0,"    define(["]],"start1":64936,"start2":64936,"length1":24,"length2":28},{"diffs":[[0,"efine([]"],[1,"\n            "],[0,", functi"]],"start1":64957,"start2":64957,"length1":16,"length2":29},{"diffs":[[0,"unction() {\n"],[1,"          "],[0,"      return"]],"start1":64981,"start2":64981,"length1":24,"length2":34},{"diffs":[[0,"n freebase;\n"],[1,"        "],[0,"    });\n  }\n"]],"start1":65014,"start2":65014,"length1":24,"length2":32},{"diffs":[[0,";\n  "],[-1,"}\n\n};\n\n// export for Node.js\n"],[1,"          \n  } "],[0,"else"]],"start1":65040,"start2":65040,"length1":37,"length2":23},{"diffs":[[0,"orts) {\n"],[1,"  // export for Node.js\n    "],[0,"module.e"]],"start1":65111,"start2":65111,"length1":16,"length2":44},{"diffs":[[0,"rts = freebase;\n"],[1,"    };\n    \n"]],"start1":65158,"start2":65158,"length1":16,"length2":28}]],"length":65186,"saved":false}
{"ts":1368023023883,"patch":[[{"diffs":[[0,"e\"]\n  }\n"],[-1,"\n  "],[1,"}\n\n"],[0,"// expor"]],"start1":64854,"start2":64854,"length1":19,"length2":19},{"diffs":[[0,"quireJS\n"],[-1,"  "],[0,"if (type"]],"start1":64887,"start2":64887,"length1":18,"length2":16},{"diffs":[[0,") {\n    "],[-1,"  "],[-1,"  "],[0,"define(["]],"start1":64942,"start2":64942,"length1":20,"length2":16},{"diffs":[[0,"fine([]\n"],[-1,"    "],[0,"        "]],"start1":64952,"start2":64952,"length1":20,"length2":16},{"diffs":[[0,"            "],[-1," "],[-1,"   "],[0,"return freeb"]],"start1":64983,"start2":64983,"length1":28,"length2":24},{"diffs":[[0,"eebase;\n"],[-1,"    "],[0,"        "]],"start1":65004,"start2":65004,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    \n  "],[1,"\n"],[0,"} else i"]],"start1":65024,"start2":65024,"length1":23,"length2":17},{"diffs":[[0,".exports) {\n"],[1,"  "],[0,"  // export "]],"start1":65083,"start2":65083,"length1":24,"length2":26},{"diffs":[[0,"eebase;\n"],[-1,"    };\n    "],[1,"};\n"],[0,"\n"]],"start1":65144,"start2":65144,"length1":20,"length2":12}]],"length":65156,"saved":false}
{"ts":1368023051152,"patch":[[{"diffs":[[0,"    });\n"],[1,"  }\n  \n"],[0,"/*\n    f"]],"start1":54944,"start2":54944,"length1":16,"length2":23}]],"length":65163,"saved":false}
{"contributors":[],"silentsave":false,"ts":1368024439707,"patch":[[{"diffs":[[0,"quire('."],[1,"."],[0,"/client_"]],"start1":265,"start2":265,"length1":16,"length2":17}]],"length":65164,"saved":false}
{"ts":1368025111030,"patch":[[{"diffs":[[0,"(arguments, "],[-1,"freebase."],[0,""],[1,""],[0,"lookup, {\n  "]],"start1":1528,"start2":1528,"length1":33,"length2":24},{"diffs":[[0,"= ps.q;\n    "],[-1,"freebase."],[0,""],[1,""],[0,"mqlread([que"]],"start1":1765,"start2":1765,"length1":33,"length2":24},{"diffs":[[0,"ohead')\n  //"],[-1," freebase."],[0,""],[1,""],[0,"lookup_id('/"]],"start1":1923,"start2":1923,"length1":34,"length2":24},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"search, "]],"start1":2136,"start2":2136,"length1":25,"length2":16},{"diffs":[[0,"     return "],[-1,"freebase."],[0,"lookup_id(ps"]],"start1":2294,"start2":2294,"length1":33,"length2":24},{"diffs":[[0,"     return "],[-1,"freebase."],[0,"url_lookup(p"]],"start1":2392,"start2":2392,"length1":33,"length2":24},{"diffs":[[0,"     return "],[-1,"freebase."],[0,""],[1,""],[0,"lookup_id(ps"]],"start1":2683,"start2":2683,"length1":33,"length2":24},{"diffs":[[0,"y\")\n  //"],[-1," freebase."],[0,""],[1,""],[0,"search(\""]],"start1":3247,"start2":3247,"length1":26,"length2":16},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"url_look"]],"start1":3581,"start2":3581,"length1":25,"length2":16},{"diffs":[[0,"  }\n  //"],[-1," freebase."],[0,""],[1,""],[0,"url_look"]],"start1":4197,"start2":4197,"length1":26,"length2":16},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"lookup, "]],"start1":4477,"start2":4477,"length1":25,"length2":16},{"diffs":[[0," return "],[-1,"freebase."],[0,""],[1,""],[0,"url_look"]],"start1":4709,"start2":4709,"length1":25,"length2":16},{"diffs":[[0," return "],[-1,"freebase."],[0,""],[1,""],[0,"lookup_i"]],"start1":4837,"start2":4837,"length1":25,"length2":16},{"diffs":[[0," })\n  }\n  //"],[-1," freebase."],[0,"lookup([\"/en"]],"start1":6355,"start2":6355,"length1":34,"length2":24},{"diffs":[[0,"\"])\n  //"],[-1," freebase."],[0,"lookup(\""]],"start1":6414,"start2":6414,"length1":26,"length2":16},{"diffs":[[0," = \"like"],[-1," freebase."],[0,""],[1,""],[0,"lookup b"]],"start1":6573,"start2":6573,"length1":26,"length2":16},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"get_id, "]],"start1":6711,"start2":6711,"length1":25,"length2":16},{"diffs":[[0," search\n    "],[-1,"freebase."],[0,""],[1,""],[0,"lookup(ps.q,"]],"start1":7033,"start2":7033,"length1":33,"length2":24},{"diffs":[[0,"(arguments, "],[-1,"freebase."],[0,""],[1,""],[0,"topic, {});\n"]],"start1":7621,"start2":7621,"length1":33,"length2":24},{"diffs":[[0,";\n    }\n    "],[-1,"freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":7753,"start2":7753,"length1":33,"length2":24},{"diffs":[[0,"  }\n  //"],[-1," freebase."],[0,""],[1,""],[0,"topic(\"t"]],"start1":8123,"start2":8123,"length1":26,"length2":16},{"diffs":[[0,"ursor\n      "],[-1,"freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":8703,"start2":8703,"length1":33,"length2":24},{"diffs":[[0,"  }\n  //"],[-1," freebase."],[0,""],[1,""],[0,"paginate"]],"start1":9079,"start2":9079,"length1":26,"length2":16},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"descript"]],"start1":9349,"start2":9349,"length1":25,"length2":16},{"diffs":[[0,";\n    }\n    "],[-1,"freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":9483,"start2":9483,"length1":33,"length2":24},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"image, {"]],"start1":10047,"start2":10047,"length1":25,"length2":16},{"diffs":[[0,");\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":10250,"start2":10250,"length1":34,"length2":24},{"diffs":[[0,"   }]\n      "],[-1,"freebase."],[1,"\n      "],[0,"mqlread(quer"]],"start1":10513,"start2":10513,"length1":33,"length2":31},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"grammar,"]],"start1":11159,"start2":11159,"length1":25,"length2":16},{"diffs":[[0,";\n    }\n    "],[-1,"freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":11289,"start2":11289,"length1":33,"length2":24},{"diffs":[[0,"   }]\n      "],[-1,"freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":11724,"start2":11724,"length1":33,"length2":24},{"diffs":[[0,"uments, "],[-1,"freebase."],[0,""],[1,""],[0,"same_as_"]],"start1":13489,"start2":13489,"length1":25,"length2":16},{"diffs":[[0,"c api\n      "],[-1,"freebase."],[0,""],[1,""],[0,"topic(result"]],"start1":13927,"start2":13927,"length1":33,"length2":24},{"diffs":[[0,"s(arguments,"],[-1," freebase."],[0,""],[1,""],[0,"translate, {"]],"start1":15142,"start2":15142,"length1":34,"length2":24},{"diffs":[[0,"ng\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":15408,"start2":15408,"length1":34,"length2":24},{"diffs":[[0,"    }]\n     "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":15671,"start2":15671,"length1":34,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"notable,"]],"start1":16086,"start2":16086,"length1":26,"length2":16},{"diffs":[[0,"\n    }\n\n    "],[-1,"freebase."],[0,""],[1,""],[0,"topic(ps.q, "]],"start1":16217,"start2":16217,"length1":33,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"sentence"]],"start1":16858,"start2":16858,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"list, {\n"]],"start1":17516,"start2":17516,"length1":26,"length2":16},{"diffs":[[0,"t its id\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":17804,"start2":17804,"length1":34,"length2":24},{"diffs":[[0," }\n     "],[-1," freebase."],[0,""],[1,""],[0,"paginate"]],"start1":18227,"start2":18227,"length1":26,"length2":16},{"diffs":[[0,"ync(geo,"],[-1," freebase."],[0,""],[1,""],[0,"place_da"]],"start1":18701,"start2":18701,"length1":26,"length2":16},{"diffs":[[0," }\n  // "],[-1," freebase."],[0,""],[1,""],[0,"place_da"]],"start1":21953,"start2":21953,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"incoming"]],"start1":22192,"start2":22192,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"outgoing"]],"start1":23145,"start2":23145,"length1":26,"length2":16},{"diffs":[[0,";\n    }\n\n   "],[-1," freebase."],[0,""],[1,""],[0,"lookup(ps.q,"]],"start1":23276,"start2":23276,"length1":34,"length2":24},{"diffs":[[0,"     }\n     "],[-1," freebase."],[0,""],[1,""],[0,"topic(topic."]],"start1":23397,"start2":23397,"length1":34,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"graph, {"]],"start1":25681,"start2":25681,"length1":26,"length2":16},{"diffs":[[0,"   }\n   "],[-1," freebase."],[0,""],[1,""],[0,"lookup(p"]],"start1":25812,"start2":25812,"length1":26,"length2":16},{"diffs":[[0,"ties\";\n     "],[-1," freebase."],[0,""],[1,""],[0,"topic(topic."]],"start1":26009,"start2":26009,"length1":34,"length2":24},{"diffs":[[0,"o\")\n  //"],[-1," freebase."],[0,""],[1,""],[0,"graph(\"/"]],"start1":27735,"start2":27735,"length1":26,"length2":16},{"diffs":[[0,"s(arguments,"],[-1," freebase."],[0,""],[1,""],[0,"related, {})"]],"start1":27924,"start2":27924,"length1":34,"length2":24},{"diffs":[[0,"inks\n   "],[-1," freebase."],[0,""],[1,""],[0,"outgoing"]],"start1":28137,"start2":28137,"length1":26,"length2":16},{"diffs":[[0,"pe\n     "],[-1," freebase."],[0,"notable("]],"start1":28760,"start2":28760,"length1":26,"length2":16},{"diffs":[[0,"  return"],[-1," freebase."],[0,"list(res"]],"start1":28856,"start2":28856,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"related,"]],"start1":29725,"start2":29725,"length1":26,"length2":16},{"diffs":[[0,"   }\n   "],[-1," freebase."],[0,""],[1,""],[0,"topic(ps"]],"start1":29877,"start2":29877,"length1":26,"length2":16},{"diffs":[[0,"s(arguments,"],[-1," freebase."],[0,""],[1,""],[0,"property_loo"]],"start1":30713,"start2":30713,"length1":34,"length2":24},{"diffs":[[0,");\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"search(ps.q,"]],"start1":30888,"start2":30888,"length1":34,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"question"]],"start1":31614,"start2":31614,"length1":26,"length2":16},{"diffs":[[0," return "],[-1,"freebase."],[0,""],[1,""],[0,"topic(q,"]],"start1":31972,"start2":31972,"length1":25,"length2":16},{"diffs":[[0,"+ '\")'\n     "],[-1," freebase."],[0,""],[1,""],[0,"search('', o"]],"start1":32343,"start2":32343,"length1":34,"length2":24},{"diffs":[[0,"else {\n     "],[-1," freebase."],[0,""],[1,""],[0,"property_loo"]],"start1":32444,"start2":32444,"length1":34,"length2":24},{"diffs":[[0,"\n       "],[-1," freebase."],[0,""],[1,""],[0,"topic(ps"]],"start1":32697,"start2":32697,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"property"]],"start1":33547,"start2":33547,"length1":26,"length2":16},{"diffs":[[0," [];\n   "],[-1," freebase."],[0,""],[1,""],[0,"question"]],"start1":33725,"start2":33725,"length1":26,"length2":16},{"diffs":[[0," method:"],[-1," freebase."],[0,""],[1,""],[0,"question"]],"start1":34056,"start2":34056,"length1":26,"length2":16},{"diffs":[[0,"async(r,"],[-1," freebase."],[0,""],[1,""],[0,"question"]],"start1":34333,"start2":34333,"length1":26,"length2":16},{"diffs":[[0," })\n  }\n  //"],[-1," freebase."],[0,"dig('/en/bov"]],"start1":34666,"start2":34666,"length1":34,"length2":24},{"diffs":[[0," })\n  //"],[-1," freebase."],[0,"dig('/en"]],"start1":34803,"start2":34803,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"gallery,"]],"start1":35036,"start2":35036,"length1":26,"length2":16},{"diffs":[[0,"   }\n   "],[-1," freebase."],[0,""],[1,""],[0,"list(ps."]],"start1":35298,"start2":35298,"length1":26,"length2":16},{"diffs":[[0,"   obj ="],[-1," freebase."],[0,""],[1,""],[0,"add_widg"]],"start1":35626,"start2":35626,"length1":26,"length2":16},{"diffs":[[0,"  }\n  //"],[-1," freebase."],[0,""],[1,""],[0,"gallery("]],"start1":35719,"start2":35719,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"wordnet,"]],"start1":35881,"start2":35881,"length1":26,"length2":16},{"diffs":[[0,"t;\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":36707,"start2":36707,"length1":34,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"transiti"]],"start1":36980,"start2":36980,"length1":26,"length2":16},{"diffs":[[0,");\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":37112,"start2":37112,"length1":34,"length2":24},{"diffs":[[0,"\n       "],[-1," freebase."],[0,""],[1,""],[0,"search('"]],"start1":37430,"start2":37430,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"geolocat"]],"start1":37724,"start2":37724,"length1":26,"length2":16},{"diffs":[[0,");\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":37895,"start2":37895,"length1":34,"length2":24},{"diffs":[[0,"    }]\n     "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":38270,"start2":38270,"length1":34,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"nearby, "]],"start1":38826,"start2":38826,"length1":26,"length2":16},{"diffs":[[0,"   }\n   "],[-1," freebase."],[0,""],[1,""],[0,"geolocat"]],"start1":38958,"start2":38958,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"inside, "]],"start1":39894,"start2":39894,"length1":26,"length2":16},{"diffs":[[0,"  }]\n   "],[-1," freebase."],[0,""],[1,""],[0,"transiti"]],"start1":40406,"start2":40406,"length1":26,"length2":16},{"diffs":[[0,"s(arguments,"],[-1," freebase."],[0,""],[1,""],[0,"wikipedia, {"]],"start1":40683,"start2":40683,"length1":34,"length2":24},{"diffs":[[0,");\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":40818,"start2":40818,"length1":34,"length2":24},{"diffs":[[0,"    }]\n     "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":41111,"start2":41111,"length1":34,"length2":24},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"dbpedia,"]],"start1":41581,"start2":41581,"length1":26,"length2":16},{"diffs":[[0,");\n    }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(ps.q,"]],"start1":41710,"start2":41710,"length1":34,"length2":24},{"diffs":[[0,"    }]\n     "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":42003,"start2":42003,"length1":34,"length2":24},{"diffs":[[0,"s(arguments,"],[-1," freebase."],[0,""],[1,""],[0,"wikipedia_ca"]],"start1":42602,"start2":42602,"length1":34,"length2":24},{"diffs":[[0,"      return"],[-1," freebase."],[0,"wikipedia_pa"]],"start1":42936,"start2":42936,"length1":34,"length2":24},{"diffs":[[0,"r) {\n       "],[-1," freebase."],[0,"wikipedia_ca"]],"start1":42987,"start2":42987,"length1":34,"length2":24},{"diffs":[[0,"oit_async(q,"],[-1," freebase."],[0,""],[1,""],[0,"wikipedia_li"]],"start1":44166,"start2":44166,"length1":34,"length2":24},{"diffs":[[0,"      return"],[-1," freebase."],[0,"wikipedia_pa"]],"start1":44387,"start2":44387,"length1":34,"length2":24},{"diffs":[[0,"r) {\n       "],[-1," freebase."],[0,"wikipedia_li"]],"start1":44435,"start2":44435,"length1":34,"length2":24},{"diffs":[[0,"pedia/en/\" +"],[-1," freebase."],[0,""],[1,""],[0,"mql_encode(o"]],"start1":45086,"start2":45086,"length1":34,"length2":24},{"diffs":[[0,"async(q,"],[-1," freebase."],[0,""],[1,""],[0,"wikipedi"]],"start1":45790,"start2":45790,"length1":26,"length2":16},{"diffs":[[0,"      return"],[-1," freebase."],[0,"wikipedia_pa"]],"start1":46016,"start2":46016,"length1":34,"length2":24},{"diffs":[[0,"\n       "],[-1," freebase."],[0,"wikipedi"]],"start1":46068,"start2":46068,"length1":26,"length2":16},{"diffs":[[0,"async(q,"],[-1," freebase."],[0,""],[1,""],[0,"schema, "]],"start1":47305,"start2":47305,"length1":26,"length2":16},{"diffs":[[0,"type\n   "],[-1," freebase."],[0,""],[1,""],[0,"search(q"]],"start1":47365,"start2":47365,"length1":26,"length2":16},{"diffs":[[0,"  }]\n       "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":48485,"start2":48485,"length1":34,"length2":24},{"diffs":[[0,"}]\n         "],[-1," freebase."],[0,""],[1,""],[0,"mqlread(quer"]],"start1":49610,"start2":49610,"length1":34,"length2":24},{"diffs":[[0,"\n       "],[-1," freebase."],[0,""],[1,""],[0,"property"]],"start1":49977,"start2":49977,"length1":26,"length2":16},{"diffs":[[0,"  return"],[-1," freebase."],[0,""],[1,""],[0,"property"]],"start1":50115,"start2":50115,"length1":26,"length2":16},{"diffs":[[0,"async(q,"],[-1," freebase."],[0,""],[1,""],[0,"property"]],"start1":50729,"start2":50729,"length1":26,"length2":16},{"diffs":[[0,"  }]\n   "],[-1," freebase."],[0,""],[1,""],[0,"mqlread("]],"start1":51381,"start2":51381,"length1":26,"length2":16},{"diffs":[[0,"}]\n     "],[-1," freebase."],[0,""],[1,""],[0,"mqlread("]],"start1":52058,"start2":52058,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"drilldow"]],"start1":52580,"start2":52580,"length1":26,"length2":16},{"diffs":[[0," \n/*\n   "],[-1," freebase."],[0,""],[1,""],[0,"paginate"]],"start1":53861,"start2":53861,"length1":26,"length2":16},{"diffs":[[0,"\n  \n  //"],[-1," freebase."],[0,""],[1,""],[0,"drilldow"]],"start1":54890,"start2":54890,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"category"]],"start1":56044,"start2":56044,"length1":26,"length2":16},{"diffs":[[0,"pedia/en/\" +"],[-1," freebase."],[0,""],[1,""],[0,"mql_encode(v"]],"start1":57297,"start2":57297,"length1":34,"length2":24},{"diffs":[[0,"  }\n  //"],[-1," freebase."],[0,""],[1,""],[0,"category"]],"start1":57666,"start2":57666,"length1":26,"length2":16},{"diffs":[[0,"s(arguments,"],[-1," freebase."],[0,""],[1,""],[0,"wikipedia_su"]],"start1":57881,"start2":57881,"length1":34,"length2":24},{"diffs":[[0,"  return"],[-1," freebase."],[0,""],[1,""],[0,"wikipedi"]],"start1":58981,"start2":58981,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"topic, {"]],"start1":59617,"start2":59617,"length1":26,"length2":16},{"diffs":[[0,"   }\n   "],[-1," freebase."],[0,""],[1,""],[0,"get_id(p"]],"start1":59748,"start2":59748,"length1":26,"length2":16},{"diffs":[[0,"guments,"],[-1," freebase."],[0,""],[1,""],[0,"wikipedi"]],"start1":60281,"start2":60281,"length1":26,"length2":16},{"diffs":[[0,"a/en/\" +"],[-1," freebase."],[0,""],[1,""],[0,"mql_enco"]],"start1":60582,"start2":60582,"length1":26,"length2":16},{"diffs":[[0,"  //"],[-1," freebase."],[0,""],[1,""],[0,"wiki"]],"start1":60665,"start2":60665,"length1":18,"length2":8}]],"length":63947,"saved":false}
{"ts":1368027409276,"patch":[[{"diffs":[[0,"ata;\n}\n\n"],[-1,"function"],[1,"var"],[0," freebas"]],"start1":368,"start2":368,"length1":24,"length2":19},{"diffs":[[0,"base"],[-1,"()\n{\n\n  var "],[1,";\n\nfreebase."],[0,"glob"]],"start1":384,"start2":384,"length1":20,"length2":20},{"diffs":[[0," }\n\n"],[-1,"  function mqlread"],[1,"exp.mqlread =function"],[0," (qu"]],"start1":752,"start2":752,"length1":26,"length2":29}]],"length":63945,"saved":false}
{"contributors":[],"silentsave":false,"ts":1368038766712,"patch":[[{"diffs":[[0,"ts) {\n  "],[-1,"//"],[0,"var _ = "]],"start1":208,"start2":208,"length1":18,"length2":16},{"diffs":[[0,"derscore');\n"],[1,"//"],[0,"  var async "]],"start1":235,"start2":235,"length1":24,"length2":26},{"diffs":[[0,"e('."],[-1,"."],[-1,"/client_side"],[0,"/asy"]],"start1":269,"start2":269,"length1":21,"length2":8},{"diffs":[[0,"/helpers"],[-1,".js"],[0,"');\n  va"]],"start1":305,"start2":305,"length1":19,"length2":16},{"diffs":[[0,"ata;\n}\n\n"],[1,"  "],[0,"var free"]],"start1":352,"start2":352,"length1":16,"length2":18},{"diffs":[[0,"base"],[-1,";\n\nfreebase."],[1," = {};\n\n  var "],[0,"glob"]],"start1":370,"start2":370,"length1":20,"length2":22},{"diffs":[[0," }\n  }\n\n"],[-1,"exp"],[1,"  freebase"],[0,".mqlread"]],"start1":736,"start2":736,"length1":19,"length2":26},{"diffs":[[0,"qlread ="],[1," "],[0,"function"],[-1," "],[0,"(query, "]],"start1":756,"start2":756,"length1":25,"length2":25},{"diffs":[[0,"\n\n  "],[-1," function lookup_id "],[1,"freebase.lookup_id = function"],[0,"(q, "]],"start1":1401,"start2":1401,"length1":28,"length2":37},{"diffs":[[0,"rams(arguments, "],[1,"freebase."],[0,"lookup, {\n      "]],"start1":1526,"start2":1526,"length1":32,"length2":41},{"diffs":[[0,"= ps.q;\n    "],[-1,""],[0,""],[1,"freebase."],[0,"mqlread([que"]],"start1":1776,"start2":1776,"length1":24,"length2":33},{"diffs":[[0,"ohead')\n  //"],[1," freebase."],[0,"lookup_id('/"]],"start1":1943,"start2":1943,"length1":24,"length2":34},{"diffs":[[0,"\n  f"],[-1,"unction search "],[1,"reebase.search = function"],[0,"(q, "]],"start1":1987,"start2":1987,"length1":23,"length2":33},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"search, "]],"start1":2176,"start2":2176,"length1":16,"length2":25},{"diffs":[[0," {\n      return "],[1,"freebase."],[0,"lookup_id(ps.q, "]],"start1":2339,"start2":2339,"length1":32,"length2":41},{"diffs":[[0," {\n      return "],[1,"freebase."],[0,"url_lookup(ps.q,"]],"start1":2446,"start2":2446,"length1":32,"length2":41},{"diffs":[[0,"1;\n      return "],[-1,""],[0,""],[1,"freebase."],[0,"lookup_id(ps.q, "]],"start1":2746,"start2":2746,"length1":32,"length2":41},{"diffs":[[0,"y\")\n  //"],[-1,""],[0,""],[1," freebase."],[0,"search(\""]],"start1":3323,"start2":3323,"length1":16,"length2":26},{"diffs":[[0," url\n  f"],[-1,"unction "],[1,"reebase."],[0,"url_look"]],"start1":3457,"start2":3457,"length1":24,"length2":24},{"diffs":[[0,"base.url_lookup "],[1,"= function"],[0,"(q, options, cal"]],"start1":3468,"start2":3468,"length1":32,"length2":42},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"url_look"]],"start1":3677,"start2":3677,"length1":16,"length2":25},{"diffs":[[0,"  }\n  //"],[1," freebase."],[0,"url_look"]],"start1":4302,"start2":4302,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[-1,"unction lookup "],[1,"reebase.lookup = function"],[0,"(q, "]],"start1":4357,"start2":4357,"length1":23,"length2":33},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"lookup, "]],"start1":4602,"start2":4602,"length1":16,"length2":25},{"diffs":[[0," return "],[-1,""],[0,""],[1,"freebase."],[0,"url_look"]],"start1":4843,"start2":4843,"length1":16,"length2":25},{"diffs":[[0," return "],[-1,""],[0,""],[1,"freebase."],[0,"lookup_i"]],"start1":4980,"start2":4980,"length1":16,"length2":25},{"diffs":[[0," })\n  }\n  //"],[1," freebase."],[0,"lookup([\"/en"]],"start1":6507,"start2":6507,"length1":24,"length2":34},{"diffs":[[0,"m/u2\"])\n  //"],[1," freebase."],[0,"lookup(\"/m/0"]],"start1":6572,"start2":6572,"length1":24,"length2":34},{"diffs":[[0,"\n  f"],[-1,"unction get_id "],[1,"reebase.get_id = function"],[0,"(q, "]],"start1":6689,"start2":6689,"length1":23,"length2":33},{"diffs":[[0," = \"like"],[1," freebase."],[0,"lookup b"]],"start1":6755,"start2":6755,"length1":16,"length2":26},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"get_id, "]],"start1":6903,"start2":6903,"length1":16,"length2":25},{"diffs":[[0,"{3}/) !="],[-1,"="],[0,""],[1,""],[0," null)) "]],"start1":7139,"start2":7139,"length1":17,"length2":16},{"diffs":[[0,"rch\n    "],[-1,""],[0,""],[1,"freebase."],[0,"lookup(p"]],"start1":7237,"start2":7237,"length1":16,"length2":25},{"diffs":[[0,"\n  f"],[1,"reebase.topic = f"],[0,"unction"],[-1," topic "],[0,"(q, "]],"start1":7667,"start2":7667,"length1":22,"length2":32},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"topic, {"]],"start1":7844,"start2":7844,"length1":16,"length2":25},{"diffs":[[0,"({});\n    }\n    "],[-1,""],[0,""],[1,"freebase."],[0,"get_id(ps.q, ps."]],"start1":7977,"start2":7977,"length1":32,"length2":41},{"diffs":[[0,"  }\n  //"],[1," freebase."],[0,"topic(\"t"]],"start1":8360,"start2":8360,"length1":16,"length2":26},{"diffs":[[0,")\n\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"paginate"]],"start1":8419,"start2":8419,"length1":24,"length2":24},{"diffs":[[0,"aginate "],[1,"= function"],[0,"(query, "]],"start1":8436,"start2":8436,"length1":16,"length2":26},{"diffs":[[0,"ursor\n      "],[-1,""],[0,""],[1,"freebase."],[0,"mqlread(quer"]],"start1":8960,"start2":8960,"length1":24,"length2":33},{"diffs":[[0,"  }\n  //"],[1," freebase."],[0,"paginate"]],"start1":9345,"start2":9345,"length1":16,"length2":26},{"diffs":[[0,"0})\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"descript"]],"start1":9428,"start2":9428,"length1":24,"length2":24},{"diffs":[[0,"ription "],[1,"= function"],[0,"(q, opti"]],"start1":9448,"start2":9448,"length1":16,"length2":26},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"descript"]],"start1":9635,"start2":9635,"length1":16,"length2":25},{"diffs":[[0,"({});\n    }\n    "],[-1,""],[0,""],[1,"freebase."],[0,"get_id(ps.q, ps."]],"start1":9774,"start2":9774,"length1":32,"length2":41},{"diffs":[[0,"\n  f"],[1,"reebase.image = f"],[0,"unction"],[-1," image "],[0,"(q, "]],"start1":10153,"start2":10153,"length1":22,"length2":32},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"image, {"]],"start1":10361,"start2":10361,"length1":16,"length2":25},{"diffs":[[0,"k({});\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q, ps."]],"start1":10569,"start2":10569,"length1":32,"length2":42},{"diffs":[[0,"\n      }]\n      "],[-1,"\n      "],[1,"freebase."],[0,"mqlread(query, p"]],"start1":10842,"start2":10842,"length1":39,"length2":41},{"diffs":[[0,"\n  f"],[-1,"unction grammar "],[1,"reebase.grammar = function"],[0,"(q, "]],"start1":11337,"start2":11337,"length1":24,"length2":34},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"grammar,"]],"start1":11504,"start2":11504,"length1":16,"length2":25},{"diffs":[[0,";\n    }\n    "],[-1,""],[0,""],[1,"freebase."],[0,"get_id(ps.q,"]],"start1":11643,"start2":11643,"length1":24,"length2":33},{"diffs":[[0,"   }]\n      "],[-1,""],[0,""],[1,"freebase."],[0,"mqlread(quer"]],"start1":12087,"start2":12087,"length1":24,"length2":33},{"diffs":[[0,"s\")\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"same_as_"]],"start1":13695,"start2":13695,"length1":24,"length2":24},{"diffs":[[0,"ame_as_links"],[1," = function"],[0,"(q, options,"]],"start1":13712,"start2":13712,"length1":24,"length2":35},{"diffs":[[0,"uments, "],[-1,""],[0,""],[1,"freebase."],[0,"same_as_"]],"start1":13872,"start2":13872,"length1":16,"length2":25},{"diffs":[[0,"c api\n      "],[-1,""],[0,""],[1,"freebase."],[0,"topic(result"]],"start1":14319,"start2":14319,"length1":24,"length2":33},{"diffs":[[0,"})\n  }\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"translate (q"]],"start1":15341,"start2":15341,"length1":32,"length2":32},{"diffs":[[0,"anslate "],[1,"= function"],[0,"(q, opti"]],"start1":15363,"start2":15363,"length1":16,"length2":26},{"diffs":[[0,"s(arguments,"],[-1,""],[0,""],[1," freebase."],[0,"translate, {"]],"start1":15553,"start2":15553,"length1":24,"length2":34},{"diffs":[[0,"s.lang\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q, ps."]],"start1":15825,"start2":15825,"length1":32,"length2":42},{"diffs":[[0,"]\n      }]\n     "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(query, {"]],"start1":16098,"start2":16098,"length1":32,"length2":42},{"diffs":[[0,"\n  f"],[-1,"unction notable"],[1,"reebase.notable = function"],[0,"(q, "]],"start1":16406,"start2":16406,"length1":23,"length2":34},{"diffs":[[0,"guments,"],[1," freebase."],[0,"notable,"]],"start1":16538,"start2":16538,"length1":16,"length2":26},{"diffs":[[0,"\n    }\n\n    "],[-1,""],[0,""],[1,"freebase."],[0,"topic(ps.q, "]],"start1":16679,"start2":16679,"length1":24,"length2":33},{"diffs":[[0,"  }\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"sentence"]],"start1":17122,"start2":17122,"length1":24,"length2":24},{"diffs":[[0,"entence "],[1,"= function"],[0,"(q, opti"]],"start1":17139,"start2":17139,"length1":16,"length2":26},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"sentence"]],"start1":17339,"start2":17339,"length1":16,"length2":26},{"diffs":[[0,"}\n\n    f"],[-1,"ns"],[1,"reebase"],[0,".descrip"]],"start1":17486,"start2":17486,"length1":18,"length2":23},{"diffs":[[0,",console.log)\n\n "],[1," freebase.list ="],[0," function list ("]],"start1":17875,"start2":17875,"length1":32,"length2":48},{"diffs":[[0,"function"],[-1," list "],[0,"(q, opti"]],"start1":17908,"start2":17908,"length1":22,"length2":16},{"diffs":[[0,"guments,"],[1," freebase."],[0,"list, {\n"]],"start1":18022,"start2":18022,"length1":16,"length2":26},{"diffs":[[0,"t its id\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q,"]],"start1":18320,"start2":18320,"length1":24,"length2":34},{"diffs":[[0,"     }\n     "],[-1,""],[0,""],[1," freebase."],[0,"paginate(que"]],"start1":18749,"start2":18749,"length1":24,"length2":34},{"diffs":[[0,"})\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"place_da"]],"start1":18884,"start2":18884,"length1":24,"length2":24},{"diffs":[[0,"ace_data"],[1," = function"],[0,"(geo, op"]],"start1":18902,"start2":18902,"length1":16,"length2":27},{"diffs":[[0,"ync(geo,"],[-1,""],[0,""],[1," freebase."],[0,"place_da"]],"start1":19248,"start2":19248,"length1":16,"length2":26},{"diffs":[[0,"]\n      "],[-1,"\n      "],[1,"freebase."],[0,"mqlread("]],"start1":20717,"start2":20717,"length1":23,"length2":25},{"diffs":[[0," }\n  // "],[1," freebase."],[0,"place_da"]],"start1":22512,"start2":22512,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[-1,"unction incoming"],[1,"reebase.incoming = function"],[0,"(q, "]],"start1":22610,"start2":22610,"length1":24,"length2":35},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"incoming"]],"start1":22772,"start2":22772,"length1":16,"length2":26},{"diffs":[[0," }\n\n    "],[-1,""],[0,""],[1,"freebase."],[0,"get_id(p"]],"start1":22918,"start2":22918,"length1":16,"length2":25},{"diffs":[[0,"nate.\n      "],[-1,""],[0,""],[1,"freebase."],[0,"paginate(que"]],"start1":23320,"start2":23320,"length1":24,"length2":33},{"diffs":[[0,"\n  f"],[-1,"unction outgoing"],[1,"reebase.outgoing = function"],[0,"(q, "]],"start1":23598,"start2":23598,"length1":24,"length2":35},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"outgoing"]],"start1":23764,"start2":23764,"length1":16,"length2":26},{"diffs":[[0,";\n    }\n\n   "],[-1,""],[0,""],[1," freebase."],[0,"lookup(ps.q,"]],"start1":23905,"start2":23905,"length1":24,"length2":34},{"diffs":[[0,"     }\n     "],[-1,""],[0,""],[1," freebase."],[0,"topic(topic."]],"start1":24036,"start2":24036,"length1":24,"length2":34},{"diffs":[[0,"ncouver\")\n\n "],[1," freebase.graph ="],[0," function gr"]],"start1":26177,"start2":26177,"length1":24,"length2":41},{"diffs":[[0,"tion"],[-1," graph"],[0,"(q, "]],"start1":26211,"start2":26211,"length1":14,"length2":8},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"graph, {"]],"start1":26341,"start2":26341,"length1":16,"length2":26},{"diffs":[[0,"   }\n   "],[-1,""],[0,""],[1," freebase."],[0,"lookup(p"]],"start1":26482,"start2":26482,"length1":16,"length2":26},{"diffs":[[0,"ties\";\n     "],[-1,""],[0,""],[1," freebase."],[0,"topic(topic."]],"start1":26689,"start2":26689,"length1":24,"length2":34},{"diffs":[[0,"o\")\n  //"],[-1,""],[0,""],[1," freebase."],[0,"graph(\"/"]],"start1":28425,"start2":28425,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[-1,"unction related"],[1,"reebase.related = function"],[0,"(q, "]],"start1":28504,"start2":28504,"length1":23,"length2":34},{"diffs":[[0,"arams(arguments,"],[1," freebase."],[0,"related, {});\n  "]],"start1":28631,"start2":28631,"length1":32,"length2":42},{"diffs":[[0,"inks\n   "],[-1,""],[0,""],[1," freebase."],[0,"outgoing"]],"start1":28858,"start2":28858,"length1":16,"length2":26},{"diffs":[[0,"e type\n     "],[1," freebase."],[0,"notable(ps.q"]],"start1":29487,"start2":29487,"length1":24,"length2":34},{"diffs":[[0,"  return"],[1," freebase."],[0,"list(res"]],"start1":29597,"start2":29597,"length1":16,"length2":26},{"diffs":[[0," || "],[-1,"r==null"],[1,"_.isEmpty(r)"],[0,") {\n"]],"start1":29710,"start2":29710,"length1":15,"length2":20},{"diffs":[[0,"));\n"],[-1,"    "],[0,"})*/\n\n "],[1," freebase.is_a ="],[0," fun"]],"start1":30339,"start2":30339,"length1":19,"length2":31},{"diffs":[[0,"tion"],[-1," is_a"],[0,"(q, "]],"start1":30371,"start2":30371,"length1":13,"length2":8},{"diffs":[[0,"guments,"],[1," freebase."],[0,"related,"]],"start1":30488,"start2":30488,"length1":16,"length2":26},{"diffs":[[0,"   }\n   "],[-1,""],[0,""],[1," freebase."],[0,"topic(ps"]],"start1":30650,"start2":30650,"length1":16,"length2":26},{"diffs":[[0,"ronto\")\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"property_loo"]],"start1":31324,"start2":31324,"length1":32,"length2":32},{"diffs":[[0,"_lookup "],[1,"= function"],[0,"(q, opti"]],"start1":31352,"start2":31352,"length1":16,"length2":26},{"diffs":[[0,"arams(arguments,"],[-1,""],[0,""],[1," freebase."],[0,"property_lookup,"]],"start1":31502,"start2":31502,"length1":32,"length2":42},{"diffs":[[0,");\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"search(ps.q,"]],"start1":31691,"start2":31691,"length1":24,"length2":34},{"diffs":[[0,"\n  f"],[-1,"unction ques"],[1,"reebase.question = func"],[0,"tion"]],"start1":32277,"start2":32277,"length1":20,"length2":31},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"question"]],"start1":32438,"start2":32438,"length1":16,"length2":26},{"diffs":[[0," return "],[-1,""],[0,""],[1,"freebase."],[0,"topic(q,"]],"start1":32806,"start2":32806,"length1":16,"length2":25},{"diffs":[[0,"+ '\")'\n     "],[-1,""],[0,""],[1," freebase."],[0,"search('', o"]],"start1":33186,"start2":33186,"length1":24,"length2":34},{"diffs":[[0,"else {\n     "],[-1,""],[0,""],[1," freebase."],[0,"property_loo"]],"start1":33297,"start2":33297,"length1":24,"length2":34},{"diffs":[[0," api\n       "],[-1,""],[0,""],[1," freebase."],[0,"topic(ps.q, "]],"start1":33556,"start2":33556,"length1":24,"length2":34},{"diffs":[[0,"s\") //******\n\n\n "],[1," freebase.dig ="],[0," function dig(q,"]],"start1":34261,"start2":34261,"length1":32,"length2":47},{"diffs":[[0,"tion"],[-1," dig"],[0,"(q, "]],"start1":34297,"start2":34297,"length1":12,"length2":8},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"property"]],"start1":34431,"start2":34431,"length1":16,"length2":26},{"diffs":[[0," [];\n   "],[-1,""],[0,""],[1," freebase."],[0,"question"]],"start1":34619,"start2":34619,"length1":16,"length2":26},{"diffs":[[0," method:"],[-1,""],[0,""],[1," freebase."],[0,"question"]],"start1":34960,"start2":34960,"length1":16,"length2":26},{"diffs":[[0,"async(r,"],[-1,""],[0,""],[1," freebase."],[0,"question"]],"start1":35247,"start2":35247,"length1":16,"length2":26},{"diffs":[[0," })\n  }\n  //"],[1," freebase."],[0,"dig('/en/bov"]],"start1":35590,"start2":35590,"length1":24,"length2":34},{"diffs":[[0," })\n  //"],[1," freebase."],[0,"dig('/en"]],"start1":35737,"start2":35737,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[-1,"unction gallery"],[1,"reebase.gallery = function"],[0,"(q, "]],"start1":35859,"start2":35859,"length1":23,"length2":34},{"diffs":[[0,"guments,"],[1," freebase."],[0,"gallery,"]],"start1":35991,"start2":35991,"length1":16,"length2":26},{"diffs":[[0,"   }\n   "],[-1,""],[0,""],[1," freebase."],[0,"list(ps."]],"start1":36263,"start2":36263,"length1":16,"length2":26},{"diffs":[[0,"   obj ="],[-1,""],[0,""],[1," freebase."],[0,"add_widg"]],"start1":36601,"start2":36601,"length1":16,"length2":26},{"diffs":[[0,"  }\n  //"],[1," freebase."],[0,"gallery("]],"start1":36704,"start2":36704,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[-1,"unction wordnet "],[1,"reebase.wordnet = function"],[0,"(q, "]],"start1":36754,"start2":36754,"length1":24,"length2":34},{"diffs":[[0,"guments,"],[1," freebase."],[0,"wordnet,"]],"start1":36886,"start2":36886,"length1":16,"length2":26},{"diffs":[[0,"t;\n    }\n   "],[1," freebase."],[0,"mqlread(quer"]],"start1":37722,"start2":37722,"length1":24,"length2":34},{"diffs":[[0,")\n    })\n  }\n\n\n "],[1," freebase.transitive ="],[0," function transi"]],"start1":37818,"start2":37818,"length1":32,"length2":54},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"transiti"]],"start1":38027,"start2":38027,"length1":16,"length2":26},{"diffs":[[0,"k({});\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q, ps."]],"start1":38165,"start2":38165,"length1":32,"length2":42},{"diffs":[[0,"\n       "],[-1,""],[0,""],[1," freebase."],[0,"search('"]],"start1":38497,"start2":38497,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[-1,"unction geoloca"],[1,"reebase.geolocation = func"],[0,"tion"]],"start1":38682,"start2":38682,"length1":23,"length2":34},{"diffs":[[0,"guments,"],[1," freebase."],[0,"geolocat"]],"start1":38812,"start2":38812,"length1":16,"length2":26},{"diffs":[[0,"k({});\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q, ps."]],"start1":38989,"start2":38989,"length1":32,"length2":42},{"diffs":[[0,"]\n      }]\n     "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(query, p"]],"start1":39374,"start2":39374,"length1":32,"length2":42},{"diffs":[[0,"\n  f"],[1,"reebase.nearby = f"],[0,"unction"],[-1," nearby"],[0,"(q, "]],"start1":39818,"start2":39818,"length1":22,"length2":33},{"diffs":[[0,"guments,"],[1," freebase."],[0,"nearby, "]],"start1":39955,"start2":39955,"length1":16,"length2":26},{"diffs":[[0,"   }\n   "],[-1,""],[0,""],[1," freebase."],[0,"geolocat"]],"start1":40097,"start2":40097,"length1":16,"length2":26},{"diffs":[[0,"\n  f"],[1,"reebase.inside = f"],[0,"unction"],[-1," inside"],[0,"(q, "]],"start1":40917,"start2":40917,"length1":22,"length2":33},{"diffs":[[0,"guments,"],[1," freebase."],[0,"inside, "]],"start1":41054,"start2":41054,"length1":16,"length2":26},{"diffs":[[0,"  }]\n   "],[-1,""],[0,""],[1," freebase."],[0,"transiti"]],"start1":41576,"start2":41576,"length1":16,"length2":26},{"diffs":[[0,"******\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"wikipedia_pa"]],"start1":41714,"start2":41714,"length1":32,"length2":32},{"diffs":[[0,"e.wikipedia_page"],[1," = function"],[0,"(q, options, cal"]],"start1":41732,"start2":41732,"length1":32,"length2":43},{"diffs":[[0,"arams(arguments,"],[1," freebase."],[0,"wikipedia, {});\n"]],"start1":41870,"start2":41870,"length1":32,"length2":42},{"diffs":[[0,"k({});\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q, ps."]],"start1":42015,"start2":42015,"length1":32,"length2":42},{"diffs":[[0,"}\n      }]\n     "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(query, p"]],"start1":42318,"start2":42318,"length1":32,"length2":42},{"diffs":[[0,"o')\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"dbpedia_"]],"start1":42657,"start2":42657,"length1":24,"length2":24},{"diffs":[[0,"ase.dbpedia_page"],[1," = function"],[0,"(q, options, cal"]],"start1":42669,"start2":42669,"length1":32,"length2":43},{"diffs":[[0,"guments,"],[1," freebase."],[0,"dbpedia,"]],"start1":42813,"start2":42813,"length1":16,"length2":26},{"diffs":[[0,"k({});\n    }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(ps.q, ps."]],"start1":42948,"start2":42948,"length1":32,"length2":42},{"diffs":[[0,"}\n      }]\n     "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(query, p"]],"start1":43251,"start2":43251,"length1":32,"length2":42},{"diffs":[[0,"ronto')\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"wikipedia_ca"]],"start1":43712,"start2":43712,"length1":32,"length2":32},{"diffs":[[0,"pedia_categories"],[1," = function"],[0,"(q, options, cal"]],"start1":43736,"start2":43736,"length1":32,"length2":43},{"diffs":[[0,"arams(arguments,"],[1," freebase."],[0,"wikipedia_catego"]],"start1":43871,"start2":43871,"length1":32,"length2":42},{"diffs":[[0,") {\n      return"],[1," freebase."],[0,"wikipedia_page(p"]],"start1":44215,"start2":44215,"length1":32,"length2":42},{"diffs":[[0,"ion(r) {\n       "],[1," freebase."],[0,"wikipedia_catego"]],"start1":44276,"start2":44276,"length1":32,"length2":42},{"diffs":[[0,")//****\n\n  f"],[-1,"unction  "],[1,"reebase."],[0,"wikipedia_li"]],"start1":45016,"start2":45016,"length1":33,"length2":32},{"diffs":[[0,"ipedia_links"],[1," = function"],[0,"(q, options,"]],"start1":45039,"start2":45039,"length1":24,"length2":35},{"diffs":[[0,"ns.doit_async(q,"],[-1,""],[0,""],[1," freebase."],[0,"wikipedia_links,"]],"start1":45475,"start2":45475,"length1":32,"length2":42},{"diffs":[[0,") {\n      return"],[1," freebase."],[0,"wikipedia_page(q"]],"start1":45706,"start2":45706,"length1":32,"length2":42},{"diffs":[[0,"ion(r) {\n       "],[1," freebase."],[0,"wikipedia_links("]],"start1":45764,"start2":45764,"length1":32,"length2":42},{"diffs":[[0,"\n      })\n    }\n"],[1,"\n"],[0,"    var url = gl"]],"start1":45827,"start2":45827,"length1":32,"length2":33},{"diffs":[[0,"  fns.http(url, "],[-1,"ps."],[0,""],[1,""],[0,"options, functio"]],"start1":45983,"start2":45983,"length1":35,"length2":32},{"diffs":[[0,"wikipedia/en/\" +"],[-1,""],[0,""],[1," freebase."],[0,"mql_encode(o.tit"]],"start1":46423,"start2":46423,"length1":32,"length2":42},{"diffs":[[0,"og)\n\n  f"],[-1,"unction  "],[1,"reebase."],[0,"wikipedi"]],"start1":46679,"start2":46679,"length1":25,"length2":24},{"diffs":[[0,"al_links"],[1," = function"],[0,"(q, opti"]],"start1":46711,"start2":46711,"length1":16,"length2":27},{"diffs":[[0,"async(q,"],[-1,""],[0,""],[1," freebase."],[0,"wikipedi"]],"start1":47151,"start2":47151,"length1":16,"length2":26},{"diffs":[[0,") {\n      return"],[1," freebase."],[0,"wikipedia_page(q"]],"start1":47383,"start2":47383,"length1":32,"length2":42},{"diffs":[[0,"r) {\n       "],[1," freebase."],[0,"wikipedia_ex"]],"start1":47445,"start2":47445,"length1":24,"length2":34},{"diffs":[[0,"  fns.http(url, "],[-1,"ps."],[0,""],[1,""],[0,"options, functio"]],"start1":47671,"start2":47671,"length1":35,"length2":32},{"diffs":[[0,"\n  f"],[1,"reebase.schema = f"],[0,"unction"],[-1," schema"],[0,"(q, "]],"start1":48281,"start2":48281,"length1":22,"length2":33},{"diffs":[[0,"async(q,"],[-1,""],[0,""],[1," freebase."],[0,"schema, "]],"start1":48704,"start2":48704,"length1":16,"length2":26},{"diffs":[[0,"type\n   "],[-1,""],[0,""],[1," freebase."],[0,"search(q"]],"start1":48774,"start2":48774,"length1":16,"length2":26},{"diffs":[[0,"  }]\n       "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(quer"]],"start1":49904,"start2":49904,"length1":24,"length2":34},{"diffs":[[0,"}]\n         "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(quer"]],"start1":51039,"start2":51039,"length1":24,"length2":34},{"diffs":[[0,"se {\n       "],[-1,""],[0,""],[1," freebase."],[0,"property_loo"]],"start1":51412,"start2":51412,"length1":24,"length2":34},{"diffs":[[0,"  return"],[-1,""],[0,""],[1," freebase."],[0,"property"]],"start1":51564,"start2":51564,"length1":16,"length2":26},{"diffs":[[0,"\")\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"property"]],"start1":51740,"start2":51740,"length1":24,"length2":24},{"diffs":[[0,"ntrospection"],[1," = function"],[0,"(q, options,"]],"start1":51766,"start2":51766,"length1":24,"length2":35},{"diffs":[[0,"if ("],[-1,"q.hasOwnProperty(q.length"],[1,"_.isArray(q"],[0,") &&"]],"start1":52127,"start2":52127,"length1":33,"length2":19},{"diffs":[[0,"async(q,"],[1," freebase."],[0,"property"]],"start1":52185,"start2":52185,"length1":16,"length2":26},{"diffs":[[0,"  }]\n   "],[-1,""],[0,""],[1," freebase."],[0,"mqlread("]],"start1":52847,"start2":52847,"length1":16,"length2":26},{"diffs":[[0,"    }]\n     "],[-1,""],[0,""],[1," freebase."],[0,"mqlread(quer"]],"start1":53530,"start2":53530,"length1":24,"length2":34},{"diffs":[[0,"\n  f"],[-1,"unction drilldow"],[1,"reebase.drilldown = functio"],[0,"n(q,"]],"start1":53891,"start2":53891,"length1":24,"length2":35},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"drilldow"]],"start1":54077,"start2":54077,"length1":16,"length2":26},{"diffs":[[0,";\n    }\n"],[-1,"    \n"],[0,"    //ge"]],"start1":54364,"start2":54364,"length1":21,"length2":16},{"diffs":[[0,"id\n    f"],[-1,"ns"],[1,"reebase"],[0,".get_id("]],"start1":54386,"start2":54386,"length1":18,"length2":23},{"diffs":[[0,"pe/type\""],[-1,"}"],[0,"\n    "],[-1,"  "],[1,"}"],[0,", functi"]],"start1":54433,"start2":54433,"length1":24,"length2":22},{"diffs":[[0,"ic) {\n      "],[-1,"    "],[0,"if (!topic |"]],"start1":54461,"start2":54461,"length1":28,"length2":24},{"diffs":[[0,"c.id) {\n        "],[-1,"    "],[0,"return ps.callba"]],"start1":54492,"start2":54492,"length1":36,"length2":32},{"diffs":[[0,"k([])\n      "],[-1,"  "],[-1,"  }\n    "],[1,"}\n"],[0,"      var qu"]],"start1":54525,"start2":54525,"length1":34,"length2":26},{"diffs":[[0,"        "],[-1,"    "],[0,"\"s:type\""]],"start1":54560,"start2":54560,"length1":20,"length2":16},{"diffs":[[0,"pic.id,\n        "],[-1," "],[-1,"   "],[0,"\"type\": [],\n    "]],"start1":54580,"start2":54580,"length1":36,"length2":32},{"diffs":[[0,"    \"type\": [],\n"],[-1,"    "],[0,"        \"name\": "]],"start1":54592,"start2":54592,"length1":36,"length2":32},{"diffs":[[0,": null,\n        "],[-1,"   "],[-1," "],[0,"\"id\": null,\n    "]],"start1":54622,"start2":54622,"length1":36,"length2":32},{"diffs":[[0,"    \"id\": null,\n"],[-1,"    "],[0,"        \"limit\":"]],"start1":54634,"start2":54634,"length1":36,"length2":32},{"diffs":[[0,"50,\n        "],[-1," "],[-1,"   "],[0,"\"estimate-co"]],"start1":54668,"start2":54668,"length1":28,"length2":24},{"diffs":[[0,": null,\n        "],[-1,"  "],[-1,"  "],[0,"\"/common/topic/i"]],"start1":54696,"start2":54696,"length1":36,"length2":32},{"diffs":[[0,"\": [{\n          "],[-1,"    "],[0,"\"id\": null,\n    "]],"start1":54732,"start2":54732,"length1":36,"length2":32},{"diffs":[[0,"    \"id\": null,\n"],[-1,"    "],[0,"          \"limit"]],"start1":54744,"start2":54744,"length1":36,"length2":32},{"diffs":[[0,"\": 1,\n          "],[-1,"    "],[0,"\"optional\": true"]],"start1":54776,"start2":54776,"length1":36,"length2":32},{"diffs":[[0,"\": true\n        "],[-1,"    "],[0,"}],\n            "]],"start1":54801,"start2":54801,"length1":36,"length2":32},{"diffs":[[0,"}],\n        "],[-1,"   "],[-1," "],[0,"\"key\": [{\n  "]],"start1":54817,"start2":54817,"length1":28,"length2":24},{"diffs":[[0,"  \"key\": [{\n"],[-1,"    "],[0,"          \"n"]],"start1":54827,"start2":54827,"length1":28,"length2":24},{"diffs":[[0,"/en\",\n          "],[-1,"    "],[0,"\"limit\": 1,\n    "]],"start1":54873,"start2":54873,"length1":36,"length2":32},{"diffs":[[0,"\": 1,\n          "],[-1," "],[-1,"   "],[0,"\"value\": null,\n "]],"start1":54895,"start2":54895,"length1":36,"length2":32},{"diffs":[[0," \"value\": null,\n"],[-1,"    "],[0,"          \"optio"]],"start1":54910,"start2":54910,"length1":36,"length2":32},{"diffs":[[0,"optional\": true\n"],[-1,"    "],[0,"        }],\n    "]],"start1":54937,"start2":54937,"length1":36,"length2":32},{"diffs":[[0,"}],\n        "],[-1,"    "],[0,"\"/common/top"]],"start1":54961,"start2":54961,"length1":28,"length2":24},{"diffs":[[0,"\": [{\n          "],[-1,"    "],[0,"\"value\": null,\n "]],"start1":54993,"start2":54993,"length1":36,"length2":32},{"diffs":[[0,",\n          "],[-1,"  "],[-1,"  "],[0,"\"limit\": 1,\n"]],"start1":55022,"start2":55022,"length1":28,"length2":24},{"diffs":[[0,"\"limit\": 1,\n"],[-1,"    "],[0,"          \"o"]],"start1":55034,"start2":55034,"length1":28,"length2":24},{"diffs":[[0,"\": true\n        "],[-1,"    "],[0,"}]\n          }]\n"]],"start1":55065,"start2":55065,"length1":36,"length2":32},{"diffs":[[0,"   }]\n      "],[-1," "],[-1,"   }]\n    "],[1,"}]\n"],[0,"      if (op"]],"start1":55078,"start2":55078,"length1":35,"length2":27},{"diffs":[[0,") {\n        "],[-1,"   "],[-1," "],[0,"for (var i i"]],"start1":55117,"start2":55117,"length1":28,"length2":24},{"diffs":[[0,"s.extend) {\n"],[-1,"    "],[0,"          qu"]],"start1":55149,"start2":55149,"length1":28,"length2":24},{"diffs":[[0,"    "],[-1,"    }\n  "],[1,"}\n"],[0,"      "],[-1,"  "],[0,"}\n      "],[-1,"  });\n  }\n  \n/*\n   "],[1,"freebase."],[0,"pagi"]],"start1":55207,"start2":55207,"length1":51,"length2":33},{"diffs":[[0,"}\n  "],[-1,"*/\n  \n  //"],[1,"// freebase."],[0,"dril"]],"start1":56251,"start2":56251,"length1":18,"length2":20},{"diffs":[[0,"g)\n\n"],[1,"\n"],[0,"  f"],[-1,"unction  "],[1,"reebase."],[0,"mql_"]],"start1":56330,"start2":56330,"length1":20,"length2":20},{"diffs":[[0,"l_encode"],[1," = function"],[0,"(s) {\n  "]],"start1":56348,"start2":56348,"length1":16,"length2":27},{"diffs":[[0," }\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"category"]],"start1":57272,"start2":57272,"length1":24,"length2":24},{"diffs":[[0,"ory_list"],[1," = function"],[0,"(q, opti"]],"start1":57293,"start2":57293,"length1":16,"length2":27},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"category"]],"start1":57435,"start2":57435,"length1":16,"length2":26},{"diffs":[[0,"wikipedia/en/\" +"],[-1,""],[0,""],[1," freebase."],[0,"mql_encode(v.tit"]],"start1":58694,"start2":58694,"length1":32,"length2":42},{"diffs":[[0,"  }\n  }\n  //"],[1," freebase."],[0,"category_lis"]],"start1":59073,"start2":59073,"length1":24,"length2":34},{"diffs":[[0,"als\")\n\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"wikipedia_su"]],"start1":59138,"start2":59138,"length1":32,"length2":32},{"diffs":[[0,"tegories"],[1," = function"],[0,"(q, opti"]],"start1":59173,"start2":59173,"length1":16,"length2":27},{"diffs":[[0,"arams(arguments,"],[1," freebase."],[0,"wikipedia_subcat"]],"start1":59309,"start2":59309,"length1":32,"length2":42},{"diffs":[[0,".compact_strong("],[-1,""],[0,""],[1,"_.flatten"],[0,"(ps.options.alre"]],"start1":60263,"start2":60263,"length1":32,"length2":41},{"diffs":[[0,"  return"],[1," freebase."],[0,"wikipedi"]],"start1":60432,"start2":60432,"length1":16,"length2":26},{"diffs":[[0,"_strong("],[1,"_.flatten"],[0,"(ps.opti"]],"start1":60606,"start2":60606,"length1":16,"length2":25},{"diffs":[[0,"ouver\"])\n\n\n "],[1," freebase.rdf ="],[0," function rd"]],"start1":60922,"start2":60922,"length1":24,"length2":39},{"diffs":[[0,"tion"],[-1," rdf"],[0,"(q, "]],"start1":60954,"start2":60954,"length1":12,"length2":8},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"topic, {"]],"start1":61098,"start2":61098,"length1":16,"length2":26},{"diffs":[[0,"   }\n   "],[-1,""],[0,""],[1," freebase."],[0,"get_id(p"]],"start1":61239,"start2":61239,"length1":16,"length2":26},{"diffs":[[0,"o\")\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"wikipedi"]],"start1":61618,"start2":61618,"length1":24,"length2":24},{"diffs":[[0,"freebase"],[1," = function"],[0,"(q, opti"]],"start1":61647,"start2":61647,"length1":16,"length2":27},{"diffs":[[0,"guments,"],[-1,""],[0,""],[1," freebase."],[0,"wikipedi"]],"start1":61793,"start2":61793,"length1":16,"length2":26},{"diffs":[[0,"a/en/\" +"],[-1,""],[0,""],[1," freebase."],[0,"mql_enco"]],"start1":62104,"start2":62104,"length1":16,"length2":26},{"diffs":[[0,"  }\n  //"],[1," freebase."],[0,"wikipedi"]],"start1":62193,"start2":62193,"length1":16,"length2":26},{"diffs":[[0,")\n\n\n\n  f"],[-1,"unction "],[1,"reebase."],[0,"add_widg"]],"start1":62244,"start2":62244,"length1":24,"length2":24},{"diffs":[[0,"e.add_widget"],[1," = function"],[0,"(obj) {\n    "]],"start1":62258,"start2":62258,"length1":24,"length2":35},{"diffs":[[0,"/\n  "],[-1,"function documenta"],[1,"/*\n  freebase.documentation = func"],[0,"tion"]],"start1":63180,"start2":63180,"length1":26,"length2":42},{"diffs":[[0,"ck(str)\n  }\n"],[1,"  */\n"],[0,"  //freebase"]],"start1":63992,"start2":63992,"length1":24,"length2":29},{"diffs":[[0,"e\"]\n  }\n"],[-1,"}"],[1,"\n"],[0,"\n\n"],[1,"  "],[0,"// expor"]],"start1":65219,"start2":65219,"length1":19,"length2":21},{"diffs":[[0,"quireJS\n"],[1,"  "],[0,"if (type"]],"start1":65254,"start2":65254,"length1":16,"length2":18},{"diffs":[[0,"efine([]"],[-1,"\n        "],[0,", functi"]],"start1":65320,"start2":65320,"length1":25,"length2":16},{"diffs":[[0,"n() {\n      "],[-1,"    "],[-1,"  "],[0,"return freeb"]],"start1":65337,"start2":65337,"length1":30,"length2":24},{"diffs":[[0,"eebase;\n"],[-1,"    "],[0,"    });\n"]],"start1":65358,"start2":65358,"length1":20,"length2":16},{"diffs":[[0,";\n  "],[-1,"      \n}"],[1,"}\n  // export for Node.js\n "],[0," els"]],"start1":65372,"start2":65372,"length1":16,"length2":35},{"diffs":[[0,") {\n"],[-1,"    // export for Node.js\n"],[0,"    "]],"start1":65460,"start2":65460,"length1":34,"length2":8},{"diffs":[[0,"eebase;\n"],[-1,"};\n"],[1,"  }"],[0,"\n"]],"start1":65487,"start2":65487,"length1":12,"length2":12}]],"length":65499,"saved":false}
